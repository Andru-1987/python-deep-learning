how to make a package


directory and python file

package_name  (short all lower case names)
__init__.py (file is a package)


import my_package


# Import local packages
import package
import py_package

# View the help for each package
help(package)
help(py_package)


>>>>>>>

import helloworld

helloworld.hello_world_fnc()

help(helloworld)

Help on package helloworld:

NAME
    helloworld

PACKAGE CONTENTS


FUNCTIONS
    hello_world_fnc()

FILE
    c:\users\dnishimoto.boise\helloworld\__init__.py


utils.py (lowercase and avoid underscores)


in __init__.py

from .utils import we_need_to_talk  (relative import)


>>>>>>

# Import local package
import text_analyzer

# Sum word_counts using sum_counters from text_analyzer
word_count_totals = text_analyzer.sum_counters(word_counts)

# Plot word_count_totals using plot_counter from text_analyzer
text_analyzer.plot_counter

>>>>>> Make your package portable

sedtup.py
requirements.txt (what files are required to install your package)
1. matplotlib
2. numpy==1.15.4
3. pycodestyle>=2.4.0


pip install -r requirements.txt

contents of setup.py


from setuptools import setup

setup(name='my_package',
	version='0.0.1',
	description='An example package for datacamp',
	author='adam',
	author_email='adam@gmail.com',
	packages=['my_package'],
	install_requires=['matplotlib',
		'numpy==1.15.4',
		'pycodestyle>=2.4.0'])


specify where to install requirements from

--index-url https://pypi.python.org/simple/

pip install .

it will install our package at an environment level so it can be imported

>>>>>
requirements = """
matplotlib==3.0.0
numpy==1.15.4
pandas==0.22.0
pycodestyle
"""

>>>>>>

# Import needed function from setuptools
from setuptools import setup

# Create proper setup to be used by pip
setup(name='text_analyzer',
      version='0.0.1',
      description='Perform and visualize a text anaylsis.',
      author='David',
      packages=['text_analyzer'])


>>>>>> install requires

# Import needed function from setuptools
from setuptools import setup

# Create proper setup to be used by pip
setup(name='text_analyzer',
      version='0.0.1',
      description='Perform and visualize a text anaylsis.',
      author='David',
      packages=['text_analyzer'],
      install_requires=['matplotlib>=3.0.0'])


>>>>>>> Adding classes to a package


object oriented programming

never include underscores

class MyClass:
	def __init__(self,value):

	self.attribute=value


adding the class to __init__.py

from .my_class import MyClass

>>>>> import your library

import my_package

my_instance = my_package.MyClass(value='class attribute value')

print(my_instance.attribute)


>>>> self

self is a way to reference the class instance

self is used to define attributes

usage of self follows pep 8 standards for readibility

>>>>>


# Import custom text_analyzer package
import text_analyzer

# Create an instance of Document with datacamp_tweet
my_document = text_analyzer.Document(text=datacamp_tweet)

# Print the text attribute of the Document instance
print(my_document.text)


>>>>> extending the document class

from .token_utils import tokenize

class Document:
	def __init__(self,text,token_regex=r'[a-zA-Z]+'):
		self.text=text
		self.tokens=self._tokenize()

	def _tokenize(self):
		return tokenize(self.text)




doc=Document('test doc')

print(doc.tokens)

['test','doc']

_tokenize is a private function


>>>>>>>


class Document:
  def __init__(self, text):
    self.text = text
    # pre tokenize the document with non-public tokenize method
    self.tokens = self._tokenize()
    # pre tokenize the document with non-public count_words
    self.word_counts = self._count_words()

  def _tokenize(self):
    return tokenize(self.text)
	
  # non-public method to tally document's word counts with Counter
  def _count_words(self):
    return Counter(self.tokens)


>>>>>>>>

# create a new document instance from datacamp_tweets
datacamp_doc = Document(datacamp_tweets)

# print the first 5 tokens from datacamp_doc
print(datacamp_doc.tokens[:5])

# print the top 5 most used words in datacamp_doc
print(datacamp_doc.word_counts.most_common(5))


>>>>>>>>>>>>Classes and the dry principle

dry principle: don't repeat yourself - reusable functional code
use inheritance to prevent duplication

class SocialMedia:
	def __init__(self):



from .parent_class import ParentClass


class ChildClass(ParentClass):
	def __init__(self):
		ParentClass.__init__(self)
		self.child_attribute="I'm a child class attribute!"


We build an instance of parent class and store it back it by reference in self


>>>>>>>>


# Define a SocialMedia class that is a child of the `Document class`
class SocialMedia(Document):
    def __init__(self, text):
        Document.__init__(self, text)


# Define a SocialMedia class that is a child of the `Document class`
class SocialMedia(Document):
    def __init__(self, text):
        Document.__init__(self, text)
        self.hashtag_counts = self._count_hashtags()
        
    def _count_hashtags(self):
        # Filter attribute so only words starting with '#' remain
        return filter_words_counts(self.word_counts, first_char='#')


>>>>>>>

# Define a SocialMedia class that is a child of the `Document class`
class SocialMedia(Document):
    def __init__(self, text):
        Document.__init__(self, text)
        self.hashtag_counts = self._count_hashtags()
        self.mention_counts = self._count_mentions()
        
    def _count_hashtags(self):
        # Filter attribute so only words starting with '#' remain
        return filter_word_counts(self.word_counts, first_char='#')      
    
    def _count_mentions(self):
        # Filter attribute so only words starting with '@' remain
        return filter_word_counts(self.word_counts, first_char='@')


>>>>>>

# Import custom text_analyzer package
import text_analyzer

# Create a SocialMedia instance with datacamp_tweets
dc_tweets = text_analyzer.SocialMedia(text=datacamp_tweets)

# Print the top five most most mentioned users
print(dc_tweets.word_counts.most_common(5))

# Plot the most used hashtags
text_analyzer.plot_counter(dc_tweets.hashtag_counts)








































