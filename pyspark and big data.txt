resilient distributed data

Big data is a term used to refer to the study and applications of data set that are too complex for traditional data-processing software.

3 V

Volume: Size of the data
Variety: Different sources and formats
Velocity: Speed of the data

Big Data concepts

cluster computing : collection of resources of multiple machines

parallel computing: simultaneous computation

distributed computing: collection of nodes (networked computers) that run in parallel

batch processing: breaking the job in small pieces and running them on individual machines.

Hadoop/MapReduce : scalable and fault tolerant framework written in java

apache spark: general purpose and lightning fast cluster computing system
1. both batch and real-time data processing
2. distributed computing
3. efficient in-memory computations for large data sets
4. lighting fast
5. provides support for java, scala, python, r and sql

spark sql, mlib, graphx, spark streaming
over rdd


spark modes for a single machine
1. local mode: single machine such as your laptop
2. cluster mode: set of pre-defined machines

pyspark is the api for spark

>>>>>>>>>>>>>>Pyspark

spark version of python

pyspark api is similar to pandas and scikit-learn

spark comes with interactive shells
1. run spark jobs
2. helpful for fast interactive prototyping
3. spark's shells allow interacting with data on disk or in memory

spark-shell for Scala
PySpark-shell for python
SparkR for R

PySpark shell support connecting to a cluster

SparkContext is an entry point.   A entry point is where control is passed from the operating system to the application

sc=SparkContext
print(sc.version)
print(sc.pythonVer)
print(sc.master) -> local[*] spark is running locally

>>>>Loading data in PySpark
rdd= sc.parallelize([1,2,3,4,5])
rdd2=sc.textFile('text.txt')


<<<<<<<


# Print the version of SparkContext
print("The version of Spark Context in the PySpark shell is", sc.version)

# Print the Python version of SparkContext
print("The Python version of Spark Context in the PySpark shell is", sc.pythonVer)

# Print the master of SparkContext
print("The master of Spark Context in the PySpark shell is", sc.master)

# Create a Python list of numbers from 1 to 100 
numb = range(1, 100)

# Load the list into PySpark  
spark_data = sc.parallelize(numb)

# Load a local file into PySpark shell
lines = sc.textFile(file_path)
print(lines)


>>>>>>>>>>>>>lambda function

lambda functions are anonymous functions in python

map
filter

lambda functions can defer execution of the code

lambda arguments: expression

double = lambda x: x*2
print(double(3))
6

difference between def and lambda functions

def cube(x):
	return x**3

g= lambda x: x**3

prit(g(10))
print(cube(10))

lambda do not need to assigned to variable and it can be put anywhere a function is expected


map() function takes a function and a list and returns a new list which contains items returned by that function for each item

map(function, list)

items=[1,2,3,4]
list(map(lambda x: x+2, items))


filter() function takes a function and a list and returns a new list for which the function evaluates as true

general syntax of filter()
filter(function, list)


items=[1,2,3,4]
list(filter(lambda x: (x%2 != 0), items))

[1,3]

flights.filter("air_time > 120").show()
flights.filter(flights.air_time > 120).show()

>>>>>

# Print my_list in the console
print("Input list is", my_list)

# Square all numbers in my_list
squared_list_lambda = list(map(lambda x: x**2, my_list))

# Print the result of the map function
print("The squared numbers are", squared_list_lambda)


# Print my_list2 in the console
print("Input list is:", my_list2)

# Filter numbers divisible by 10
filtered_list = list(filter(lambda x: (x%10 == 0), my_list2))

# Print the numbers divisible by 10
print("Numbers divisible by 10 are:", filtered_list)

RDD
resilient distributed dataset
1. resilient - the ability to withstand failures
2. distributed - spanned the tasks across multiple machines in the cluster
3. datasets - collection of partitioned data: arrays, tables, tuples

spark partitions the data across partitions with each partition belonging to a node.

create rdds
1. files in hdfs
2. objects in amazon s3 bucket
3. lines in a text file

from existing rdds

parallelize() fro creating rdds from python list

rdd= sc.parallelize([1,2,3,4,5])
rdd2=sc.textFile('text.txt')
rdd3 = sc.parallelize("Hello World")

sc.getNumPartitions()


>>>>

# Create an RDD from a list of words
RDD = sc.parallelize(["Spark", "is", "a", "framework", "for", "Big Data processing"])

# Print out the type of the created object
print("The type of RDD is", type(RDD))

# Print the file_path
print("The file_path is", file_path)

# Create a fileRDD from file_path
fileRDD = sc.textFile(file_path)

# Check the type of fileRDD
print("The file type of fileRDD is", type(fileRDD))

# Check the number of partitions in fileRDD
print("Number of partitions in fileRDD is", fileRDD.getNumPartitions())

# Create a fileRDD_part from file_path with 5 partitions
fileRDD_part = sc.textFile(file_path, minPartitions = 5)

# Check the number of partitions in fileRDD_part
print("Number of partitions in fileRDD_part is", fileRDD_part.getNumPartitions())


>>>>>>>>RDD operations in pyspark


spark operations = transformations + actions

1. transformations create new rdds
2. actions perform computation on the rdds

Transformations follow Lazy evaluation

Transformations are : map(), filter(), flatMap(), union()

map() transformation applies a function to all elements in the RDD

RDD = sc.parallelize([1,2,3,4])
RDD_map = RDD.map(lambda x: x*x)

>>>filter()

Filter transformation returns a new RDD with only elements that pass the condition

RDD = sc.parallelize([1,2,3,4])
RDD_filter=RDD.filter(lambda x: x> 2)

flatMap() transformation returns multiple values for each element in the original RDD


RDD=sc.parallelize(["Hello World", "How are you"])
RDD_flatmap=RDD.flatMap(lambda x: x.split(" "))

union() Transformation

inputRDD ->filter warningsRDD
inputRDD ->filter errorsRDD
union badlinesRDD

inputRDD = sc.textFile('logs.txt')
errorRDD=inputRDD.filter(lambda x: "error" in x.split())
warningRDD = inputRDD.filter(lambda x: "warnings" in x.split())
combinedRDD = errorRDD.union(warningsRDD)

RDD actions

1. operation return a value after running a computation on RDD

Basic RDD actions:
1. collect() : returns all the elements of the dataset as an array
2. take(N): returns an array with the first N elements of the dataset
3. first(): first element
4. count(): total number of elements in the RDD


[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]

# Create map() transformation to cube numbers
cubedRDD = numbRDD.map(lambda x: x**3)

# Collect the results
numbers_all = cubedRDD.collect()

# Print the numbers from numbers_all
for numb in numbers_all:
	print(numb)

1
8
27
64
125
216
343
512
729
1000

# Filter the fileRDD to select lines with Spark keyword
fileRDD_filter = fileRDD.filter(lambda line: 'Spark' in line.split())

# How many lines are there in fileRDD?
print("The total number of lines with the keyword Spark is", fileRDD_filter.count())

# Print the first four lines of fileRDD
for line in fileRDD_filter.take(4): 
  print(line)


>>>>>>>pair RDD

1. Real life datasets are usually key/value pairs
2. Each row is a key and maps to one or more values
3. Key/Value pair

creating pair RDD
1. from a list of key-value tuple
2. from regular RDD

my_tuple=[('Sam',23),('Mary',34),('Peter',25)]

pairRDD_tuple=sc.parallelize(my_tuple)

my_list= ['Sam 23', 'Mary 34', 'Peter 25']

regularRDD = sc.parallelize(my_list)
pairRDD_RDD = regularRDD.map(lambda s: (s.split(' ')[0], s.split(' ')[1]))


RDD transformations
1. reduceByKey(): transform combines values with the same key
2. groupByKey(): groups all the values with the same key in the pair RDD
3. sortByKey(): sorted by key in ascending or descending order
4. join(): transformation join the two pair RDDs based on their key


regularRDD = sc.parallelize([("Messi, 23), ("Ronaldo",34),
	("Neymar",22), ("Messi",24)])

pairRDD_reducebykey= regularRDD.reduceByKey(lambda x,y: x+y)
pairRDD_reducebykey.collect()

[('Neymar',22),('Ronaldo',34), ('Messi',47)]


pairRDD_reducebykey_rev= pairRDD_reducebykey.map(lambda x: (x[1],x[0]))

pairRDD_reducebykey_rev.sortByKey(ascending=False).collect()

airports=[('us','jfk'),('uk','lhr'),('fr','cdg'),('us','sfo')]

regularRDD = sc.parallelize(airports)
pairRDD_group=regularRDD.groupByKey().collect()
for cont, air in pairRDD_group:
	print(cont, list(air))

RDD1= sc.parallelize([("Messi",34),("Ronaldo",32),("Neymar",24)])
RDD2= sc.parallelize([("Ronaldo",80),("Neymar",120),("Messi",100)])

RDD1.join(RDD2).collect()

>>>>>
# Create PairRDD Rdd with key value pairs
Rdd = sc.parallelize([(1,2),(3,4),(3,6),(4,5)])

# Apply reduceByKey() operation on Rdd
Rdd_Reduced = Rdd.reduceByKey(lambda x, y: x+y)

# Iterate over the result and print the output
for num in Rdd_Reduced.collect(): 
  print("Key {} has {} Counts".format(num[0], num[1]))


>>>>> Advance RDD actions

reduce(func) action is used for aggregating the elements of a regular RDD

The function should be cummutative (changing the order of the operands does not change the results) and associative.

x=[1,3,4,6]
RDD=sc.parallelize(x)
RDD.reduce(lambda x, y: x+y)

saveAsTextFile(): action saves RDD into a text file inside a directory with each partition as a separate file

RDD.saveAsTextFile('tempFile')

coalesce() method can be used to save RDD as a single text file in the directory

RDD.coalesce(1).saveAsTextFile('tempFile')


>>>> Actions

Pair RDD actions leverage the key-value data

countByKey(): only available for type(K,V) - action counts the number of elements for each key

collectAsMap(): returns the key-value pairs in rdd as dictionary

rdd= sc.parallelize([('a',1),('b',1),('a',1)])

for key, val = in rdd.countByKey().items():
	print(key,val)

('a',2)
('b',1)


sc.parallelize([(1,2),(3,4)]).collectAsMap()

{1:2,3:4}

>>>>>

# Count the unique keys
total = Rdd.countByKey()

# What is the type of total?
print("The type of total is", type(total))

# Iterate over the total and print the output
for k, v in total.items(): 
  print("key", k, "has", v, "counts")


>>>>>>

# Create a baseRDD from the file path
baseRDD = sc.textFile(file_path)

# Split the lines of baseRDD into words
splitRDD = baseRDD.flatMap(lambda x: x.split())

# Count the total number of words
print("Total number of words in splitRDD:", splitRDD.count())

Total number of words in splitRDD: 904061

>>>>

# Convert the words in lower case and remove stop words from the stop_words curated list
splitRDD_no_stop = splitRDD.filter(lambda x: x.lower() not in stop_words)

# Create a tuple of the word and 1 
splitRDD_no_stop_words = splitRDD_no_stop.map(lambda w: (w, 1))

# Count of the number of occurences of each word
resultRDD = splitRDD_no_stop_words.reduceByKey(lambda x, y: x + y)

# Display the first 10 words and their frequencies from the input RDD
for word in resultRDD.take(10):
	print(word)

# Swap the keys and values from the input RDD
resultRDD_swap = resultRDD.map(lambda x: (x[1], x[0]))

# Sort the keys in descending order
resultRDD_swap_sort = resultRDD_swap.sortByKey(ascending=False)

# Show the top 10 most frequent words and their frequencies from the sorted RDD
for word in resultRDD_swap_sort.take(10):
	print("{},{}". format(word[1], word[0]))

('Quince', 1)
    ('Corin,', 2)
    ('circle', 10)
    ('enrooted', 1)
    ('divers', 20)
    ('Doubtless', 2)
    ('undistinguishable,', 1)
    ('widowhood,', 1)
    ('incorporate.', 1)
    ('rare,', 10)
    thou,4247
    thy,3630
    shall,3018
    good,2046
    would,1974
    Enter,1926
    thee,1780
    I'll,1737
    hath,1614
    like,1452


>>>>>>>>>>>Data frames

PySpark SQL is a spark library for structured data.  It provides more information about the structure of data and computation.


Dataframes in pyspark support both SQL series or expression methods.

SparkContext is the main entry point for creating RDDS

SparkSession provides a single point of entry to interact with Spark DataFrames

SparkSession can be used to create DataFrame, register DataFrames, and execute sql queries.

1. create a dataframe using createDataFrame()
2. csv, json, txt

schema provides information about column name, type of data in the column, empty values


iphones_RDD = sc.parallelize([
('xs',2018,5.65,2.79,6.24),
('xr',2018,5.94,2.98,6.85)
])

names=['Model','Year','Height','Width','Weight']

iphones_df=spark.createDataFrame(iphones_RDD, schema=names)

df_csv = spark.read.csv('people.csv', header=True, inferSchema=True)

df_json = spark.read.json('people.json', header=True, inferSchema=True)


>>>>>>>>>>>>

# Create an RDD from the list
rdd = sc.parallelize(sample_list)

# Create a PySpark DataFrame
names_df = spark.createDataFrame(rdd, schema=['Name', 'Age'])

# Check the type of names_df
print("The type of names_df is", type(names_df))

# Create an DataFrame from file_path
people_df = spark.read.csv(file_path, header=True, inferSchema=True)

# Check the type of people_df
print("The type of people_df is", type(people_df))

print(people_df.head(5))

>>>>>>>> interaction with dataframes

dataframes support transformations and actions

1. select() : extract one or more columns and creates a new dataframe
2. filter() : filters out the rows based on a condition
3. groupby() : aggregation
4. orderby() : sort by one or more columns
5. dropDuplicates() : removes the duplicate rows of a dataframe
6. withColumnRenamed() : renames a column in the Dataframe

actions
1. printSchema() : field and data type
2. head()
3. show(): prints the first 20 rows in the dataframe
4. count()
5. columns: names of columns in the dataframe
6. describe(): summary statistics


df_id_age= test.select('Age')

df_id_age.show(3)

new_df_age21=new_df.filter(new_df.Age>21)
new_df_age21.show(3)


test_df_age_group=test_df.groupby('Age')
test_df_age_group.count().show(3)

test_df_age_group.count().orderBy('Age').show(3)

test_df_no_dup = test_df.select('User_ID','Gender','Age').dropDuplicates()

test_df_no_dup.count()

test_df_sex = test_df.withColumnRenamed('Gender','Sex')
test_df_sex.show(3)

>>>>>

# Print the first 10 observations 
people_df.show(10)

# Count the number of rows 
print("There are {} rows in the people_df DataFrame.".format(people_df.count()))

# Count the number of columns and their names
print("There are {} columns in the people_df DataFrame and their names are {}".format(len(people_df.columns), people_df.columns))

# Select name, sex and date of birth columns
people_df_sub = people_df.select('name', 'sex','date of birth')

# Print the first 10 observations from people_df_sub
people_df_sub.show(10)

# Remove duplicate entries from people_df_sub
people_df_sub_nodup = people_df_sub.dropDuplicates()

# Count the number of rows
print("There were {} rows before removing duplicates, and {} rows after removing duplicates".format(people_df_sub.count(), people_df_sub_nodup.count()))

# Filter people_df to select females 
people_df_female = people_df.filter(people_df.sex == "female")

# Filter people_df to select males
people_df_male = people_df.filter(people_df.sex == "male")

# Count the number of rows 
print("There are {} rows in the people_df_female DataFrame and {} rows in the people_df_male DataFrame".format(people_df_female.count(), people_df_male.count()))

>>>>>> Pyspark sql

sql() method takes a sql statement as an argument and returns the result as a dataframe

df.createOrReplaceTempView('table1')

df2 = spark.sql('select field1, field2 from table1')
df2.collect()

query='''select Age, max(Purchase) from test_table group by Age'''

df2=spark.sql(query).show(5)

>>>>>>>>>>

# Create a temporary table "people"
people_df.createOrReplaceTempView("people")

# Construct a query to select the names of the people from the temporary table "people"
query = '''SELECT name FROM people'''

# Assign the result of Spark's query to people_df_names
people_df_names = spark.sql(query)

# Print the top 10 names of the people
people_df_names.show(10)

# Filter the people table to select female sex 
people_female_df = spark.sql('SELECT * FROM people WHERE sex=="female"')

# Filter the people table DataFrame to select male sex
people_male_df = spark.sql('SELECT * from people where sex=="male"')

# Count the number of rows in both DataFrames
print("There are {} rows in the people_female_df and {} rows in the people_male_df DataFrames".format(people_female_df.count(), people_male_df.count()))


>>>>>>>> visualizations

matplotlib, seaborn, bokeh

pyspark_dist_explore library
toPandas()
HandySpark library


pyspark_dist_explore: hist(), distplot(), pandas_histogram()


test_df = spark.read.csv(file_path, header=True, inferSchema=True)

test_df_age=test_df.select('Age')

hist(test_df_age, bins=20, color='red')

test_df_sample_pandas=test_df.toPandas()

test_df_sample_pandas.hist('Age')

HandySpark is a package designed to improve PySpark user experience.

hdf = test_df.toHandy()

hdf.cols['Age'].hist()

>>>>>

# Check the column names of names_df
print("The column names of names_df are", names_df.columns)

# Convert to Pandas DataFrame  
df_pandas = names_df.toPandas()

# Create a horizontal bar plot
df_pandas.plot(kind='barh', x='Name', y='Age', colormap='winter_r')
plt.show()


# Load the Dataframe
fifa_df = spark.read.csv(file_path, header=True, inferSchema=True)

# Check the schema of columns
fifa_df.printSchema()

# Show the first 10 observations
fifa_df.show(10)

# Print the total number of rows
print("There are {} rows in the fifa_df DataFrame".format(fifa_df.count()))

# Create a temporary view of fifa_df
fifa_df.createOrReplaceTempView('fifa_df_table')

# Construct the "query"
query = '''SELECT Age FROM fifa_df_table WHERE Nationality == "Germany"'''

# Apply the SQL "query"
fifa_df_germany_age = spark.sql(query)

# Generate basic statistics
fifa_df_germany_age.describe().show()


# Convert fifa_df to fifa_df_germany_age_pandas DataFrame
fifa_df_germany_age_pandas = fifa_df_germany_age.toPandas()

# Plot the 'Age' density of Germany Players
fifa_df_germany_age_pandas .plot(kind='density')
plt.show()


>>>>>>>>>>Machine Learning
MLlib
1. collaborative filtering
2. classification
3. clustering

featurization: feature extraction, transformation, dimension reduction, and selection

pipelines: tools for constructing, evaluating, and tuning ml pipelines

scikit-learn algorithms work for small datasets on a single machine.

Sparks MLlib algorithms are designed for parallel processing on a cluster

MLlib provides a high-level api to build machine learning pipelines

MLlib:
1. linear svm
2. logistic regression
3. decision trees
4. random forest
5. gradient boosted trees
6. naive bayes
7. linear least squares
8. lasso
9. ridge regression
10. isotonic regression


clusering: k-means, gaussian mixture, bisecting k-means, streaming k-means

3cs
1. collaborative filtering : produce recommendations
2. classification: identify to which of a set of categories a new observation
3. clustering : grouping data based on similar characteristics

pyspark.mllib.recommendation

from pyspark.mllib.recommendation import ALS

from pyspark.mllib.classification import LogisticRegressionWithLBFGS


from pyspark.mllib.clustering import KMeans

MLlib only support RDD data


>>>>> collaborative filtering

1. user-user collaborative filtering: finds users that are similiar to the target user

2. item-item collaborative filtering: finds and recommends items that are similar to items with the target user


pyspark.mllib.recommendation
1. user, product, rating

from pyspark.mllib.recommendation import Rating

r=Rating(user=1,product=2, rating=5.0)

(r[0],r[1],r[2])

1,2,5


Splitting data into training and testing tests

data=sc.parallelize([1,2,3,4,5,6,7,8,9,10])
training,test=data.randomSplit([0.6,0.4])

training.collect()
test.collect()

ALS.train(ratings,rank, iterations)
1. rank represents the number of features
2. iternations the number of cycles to run the least squares

r1=Rating(1,1,1.0)
r2=Rating(1,2,2.0)
r3=Rating(2,1,2.0)
ratings=sc.parallelize([r1,r2,r3])
ratings.collect()

model=ALS.train(ratings,rank=10, iterations=10)

unrates_Rd=sc.paralleize([(1,2),(1,1)])
predictions= model.predictAll(unrated_RDD)
predictions.collect()


The MSE is the average value of the square of (actual rating - predicted rating)


rates = ratings.map(lambda x: ((x[0],x[1]),x[2]))
rates.collect()
preds=predictions.map(lambda x: ((x[0],x[1]),x[2]))

rates_preds=rates.join(preds)
rates_preds.collect()

MSE = rates_preds.map(lambda p(p[1][0]-p[1][1])**2).mean()


>>>>>>>


# Load the data into RDD
data = sc.textFile(file_path)

# Split the RDD 
ratings = data.map(lambda l: l.split(','))

# Transform the ratings RDD 
ratings_final = ratings.map(lambda line: Rating(int(line[0]), int(line[1]), float(line[2])))

# Split the data into training and test
training_data, test_data = ratings_final.randomSplit([0.8, 0.2])


# Create the ALS model on the training data
model = ALS.train(training_data, rank=10, iterations=10)

# Drop the ratings column 
testdata_no_rating = test_data.map(lambda p: (p[0], p[1]))

# Predict the model  
predictions = model.predictAll(testdata_no_rating)

# Return the first 2 rows of the RDD
predictions.take(2)

# Prepare ratings data
rates = ratings_final.map(lambda r: ((r[0], r[1]), r[2]))

# Prepare predictions data
preds = predictions.map(lambda r: ((r[0], r[1]), r[2]))

# Join the ratings data with predictions data
rates_and_preds = rates.join(preds)

# Calculate and print MSE
MSE = rates_and_preds.map(lambda r: (r[1][0] - r[1][1])**2).mean()
print("Mean Squared Error of the model for the test data = {:.2f}".format(MSE))

>>>>>>> Classification

1. binary classification
2. multi-class classification



from pyspark.mllib.classification import LogisticRegressionWithLBFGS

sig(t) = 1/(1+e**-t)

Two type of vectors
1. Dense : store all their entries in an array of floating point numbers
2. Sparse : store only the nonzero values and their indices

denseVec = Vectors.dense([1.0,2.0,3.0])

sparseVec=Vectors.sparse(4,{1:1.0,3:5.5})

LabelledPoint() is a wrapper for input features and predicted value
1. for binary classification of logistic regression a label is either 0 (negative) or 1 (positive)

positive = LabeledPoint(1.0, [1.0,0.0,3.0])
negative = LabeledPoint(0.0, [2.0,1.0,1.0])


>>>> term frequency

HashingTF() algorithm is used to map feature value to indices in the feature vector

from pyspark.mllib.feature import HashingTF

sentence="hello hello world"

words=sentence.split()
tf=HashingTF(10000)
tf.transform(words)


from pyspark.mllib.classification import LogisticRegressionWithLBFGS

lrm=LogisticRegressionWithLBFGS(RDD)

lrm.pred([1.0,0.0])
lrm.pred([0.0,1.0])

1
0


>>>>>>

# Load the datasets into RDDs
spam_rdd = sc.textFile(file_path_spam)
non_spam_rdd = sc.textFile(file_path_non_spam)

# Split the email messages into words
spam_words = spam_rdd.flatMap(lambda email: email.split(' '))
non_spam_words = non_spam_rdd.flatMap(lambda email: email.split(' '))

# Print the first element in the split RDD
print("The first element in spam_words is", spam_words.first())
print("The first element in non_spam_words is", non_spam_words.first())


The first element in spam_words is You
The first element in non_spam_words is Rofl.

# Create a HashingTf instance with 200 features
tf = HashingTF(numFeatures=200)

# Map each word to one feature
spam_features = tf.transform(spam_words)
non_spam_features = tf.transform(non_spam_words)

# Label the features: 1 for spam, 0 for non-spam
spam_samples = spam_features.map(lambda features:LabeledPoint(1, features))
non_spam_samples = non_spam_features.map(lambda features:LabeledPoint(0, features))

# Combine the two datasets
samples = spam_samples.join(non_spam_samples)


# Split the data into training and testing
train_samples,test_samples = samples.randomSplit([0.8, 0.2])

# Train the model
model = LogisticRegressionWithLBFGS.train(train_samples)

# Create a prediction label from the test data
predictions = model.predict(test_samples.map(lambda x: x.features))

# Combine original labels with the predicted labels
labels_and_preds = test_samples.map(lambda x: x.label).zip(predictions)

# Check the accuracy of the model on the test data
accuracy = labels_and_preds.filter(lambda x: x[0] == x[1]).count() / float(test_samples.count())
print("Model accuracy : {:.2f}".format(accuracy))

Model accuracy : 0.74

>>>>>>> clustering

organizes a collection of data into groups


RDD = sc.textFile('WineData.csv'.map(lambda x: x.split(",")).
map(lambda x: [float(x[0]), float(x[1])])

RDD.take(5)


from pyspark.mllib.clustering import KMeans

model=KMeans.train(RDD, k=2, maxIterations=10)

model.clusterCenters

from math import sqrt

def error(point):
	center=model.cednters[model.predict(point)]
	return sqrt(sum([x**2 for x in (point - center)]))

WSSE = RDD.map(lambda point: error(point)).reduce(lambda x,y:x+y)

print("Within Set Sum of Squared Error = " + str(WSSSE))


>>>>visualization

win_data_df=spark.createDataFrame(RDD, schema=['col1','col2'])

wine_data_df_pandas=wine_data_df.toPandas()


cluster_centers_pandas=pd.DataFrame(model.clusterCenters, columns=['col1','col2'])
cluster_centers_pandas.head()

plt.scatter(wine_data_df_pandas['col1'],wine_data_df_pandas['col2'])

plt.scatter(cluster_data_df_pandas['col1'],cluster_data_df_pandas['col2'],color='red',marker='x')


>>>>>

# Train the model with clusters from 13 to 16 and compute WSSSE
for clst in range(13, 17):
    model = KMeans.train(rdd_split_int, clst, seed=1)
    WSSSE = rdd_split_int.map(lambda point: error(point)).reduce(lambda x, y: x + y)
    print("The cluster {} has Within Set Sum of Squared Error {}".format(clst, WSSSE))

# Train the model again with the best k
model = KMeans.train(rdd_split_int, k=15, seed=1)

# Get cluster centers
cluster_centers = model.clusterCenters
# Load the dataset into an RDD
clusterRDD = sc.textFile(file_path)

# Split the RDD based on tab
rdd_split = clusterRDD.map(lambda x: x.split('\t'))

# Transform the split RDD by creating a list of integers
rdd_split_int = rdd_split.map(lambda x: [int(x[0]), int(x[1])])

# Count the number of rows in RDD 
print("There are {} rows in the rdd_split_int dataset".format(rdd_split_int.count()))


# Convert rdd_split_int RDD into Spark DataFrame and then to Pandas DataFrame
rdd_split_int_df_pandas = spark.createDataFrame(rdd_split_int, schema=["col1", "col2"]).toPandas()

# Convert cluster_centers to a pandas DataFrame
cluster_centers_pandas = pd.DataFrame(cluster_centers, columns=["col1", "col2"])

# Create an overlaid scatter plot of clusters and centroids
plt.scatter(rdd_split_int_df_pandas["col1"], rdd_split_int_df_pandas["col2"])
plt.scatter(cluster_centers_pandas ["col1"], cluster_centers_pandas ["col2"], color="red", marker="x")
plt.show()
















































































































