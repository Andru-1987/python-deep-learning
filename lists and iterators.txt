iterators and generators


list=["hello","world"]

for word in list:
    print(word)

for letter in "hello world":
    print(letter)

for i in range(100):
    print (i)

list,string, dictionaries file connections are iterable

an object with an associated iter() method

iterator and a next() method

word="around the world in 80 days"
it=iter(word)
for i in np.arange(0,len(word)):
    print(next(it))


word="around the world in 80 days"
it=iter(word)
   
print(*it)  

once you have iterated over the items they are depleted

>>iterating over a dictionary

dict={'firstName':'david','lastName':'nishimoto'}

for key,value in dict.items():
    print(key,value)

>>opening a file

file=open('file.txt')
it=iter(file)
print(next(it))

>>Sample

# Create a list of strings: flash
flash = ['jay garrick', 'barry allen', 'wally west', 'bart allen']

# Print each list item in flash using a for loop

for item in flash:
    print(item)

# Create an iterator for flash: superhero
it=iter(flash)

# Print each item from the iterator
print(next(it))
print(next(it))
print(next(it))
print(next(it))

>>>Sample

# Create an iterator for range(3): small_value
small_value = iter(range(3))

# Print the values in small_value
print(next(small_value))
print(next(small_value))
print(next(small_value))

# Loop over range(3) and print the values
for num in range(3):
    print(num)

# Create an iterator for range(10 ** 100): googol
googol = iter(range(10 ** 100))

# Print the first 5 values from googol
print(next(googol))
print(next(googol))
print(next(googol))
print(next(googol))
print(next(googol))

>>Sample

# Create a range object: values
values = range(10,21)

# Print the range object
print(values)

# Create a list of integers: values_list
values_list = list(values)

# Print values_list
print(values_list)

# Get the sum of values: values_sum
values_sum = sum(values_list)
# Print values_sum
print(values_sum)


>>Enumerate and zip

enumerate returns an enumerator object

avengers =['hawkeye','iron man','thor','quicksilver']

e=enumerate(avengers)
print(type(e))

#e_list=list(e)
#print(e_list)

for index,value in enumerate(avengers):
    print(index,value)
    
for index,value in enumerate(avengers, start=10):
    print(index,value)   


>>>Sample

# Create a list of strings: mutants
mutants = ['charles xavier', 
            'bobby drake', 
            'kurt wagner', 
            'max eisenhardt', 
            'kitty pryde']

# Create a list of tuples: mutant_list
mutant_list = list(enumerate(mutants))

# Print the list of tuples
print(mutant_list)

# Unpack and print the tuple pairs
for index1, value1 in enumerate(mutants):
    print(index1, value1)

# Change the start index
for index2, value2 in enumerate(mutants, start=1):
    print(index2, value2)


>>>Sample zip

Printing just a zip object will not return the values unless you unpack it first. In this exercise, you will explore this for yourself.


>