def sleep_n_seconds(n=10)
"" Pause process for n seconds

	Args:
		n(int): The number of seconds to pause for
""

	time.sleep(n)
	
print(sleep_n_seconds.__doc__)
print(sleep_n_seconds.__name__)
print(sleep_n_seconds.___defaults__)


from functools import wraps

def time(func)
"""A decorator that prints how long a function took to run

	@wraps(func)
	def wrapper(*args,**kwargs):
		t_start=time.time()

		result=func(*args,**kwargs)
		t_total = time.time-t_start
		print('{} took {}s'.format(func.__name__, t_total())
	return result
   return wrapper

the wraps modifies the wrapper meta data

sleep_n_seconds.__wrapped__


>>>>Sample >> identify the wrapper problem with seeing doc

def wrapper(*args, **kwargs):
    """Print 'hello' and then call the decorated function.
    """
    print('Hello')
    return func(*args, **kwargs)
  return wrapper

@add_hello
def print_sum(a, b):
  """Adds two numbers and prints the sum"""
  print(a + b)
  
print_sum(10, 20)
print(print_sum.__doc__)

>>>>Sample  >>> import the wraps


from functools import wraps

from functools import wraps

def add_hello(func):
  @wraps(func)
  def wrapper(*args, **kwargs):
    """Print 'hello' and then call the decorated function."""
    print('Hello')
    return func(*args, **kwargs)
  return wrapper
  
@add_hello
def print_sum(a, b):
  """Adds two numbers and prints the sum"""
  print(a + b)
  
print_sum(10, 20)
print(print_sum.__doc__)

>>>>sample >>> accessing the original function using __wrapped__

@check_everything
def duplicate(my_list):
  """Return a new list that repeats the input twice"""
  return my_list + my_list

t_start = time.time()
duplicated_list = duplicate(list(range(50)))
t_end = time.time()
decorated_time = t_end - t_start

t_start = time.time()
# Call the original function instead of the decorated one
duplicated_list = duplicate.__wrapped__(list(range(50)))
t_end = time.time()
undecorated_time = t_end - t_start

print('Decorated time: {:.5f}s'.format(decorated_time))
print('Undecorated time: {:.5f}s'.format(undecorated_time))



