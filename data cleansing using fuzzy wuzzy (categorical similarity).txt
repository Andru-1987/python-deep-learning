>>>>>>>>>>>>>>>process
from fuzzywuzzy import process

string="Houston Rockets vs Los Angeles Lakers"

choices=pd.Series(['Rockets vs Lakers', 'Lakers vs Rockets',
'Houston vs Los Angeles','Heat vs Bulls'])

process.extract(string, choices, limit=2)

>>>>>>>>>>>>>>collapsing categories

use .replace() to collapse "eur" into "Europe"

>>>>>> collapse using similiarity
https://anaconda.org/conda-forge/fuzzywuzzy

categories={'state':'California','state':'New York'}

for state in categories['state']:
	matches=process.extract(state,survey['state'],limit=survey.shape[0])
	for potential_match in matches:
		if potential_match[1]>=80:
			survey.loc[survey['state']==potential_match[0],'state']=state


>>>>>Sample >>> process.extract

# Import process from fuzzywuzzy
from fuzzywuzzy import process

# Store the unique values of cuisine_type in unique_types
unique_types = restaurants['cuisine_type'].unique()

# Calculate similarity of 'asian' to all values of unique_types
print(process.extract('asian', unique_types, limit = len(unique_types)))

# Calculate similarity of 'american' to all values of unique_types
print(process.extract('american', unique_types, limit = len(unique_types)))

# Calculate similarity of 'italian' to all values of unique_types
print(process.extract('italian', unique_types, limit = len(unique_types)))


>>>>>Sample >> replace with similarities

categories = ['asian', 'american', 'italian']

# For each correct cuisine_type in categories
for cuisine in categories:
  # Find matches in cuisine_type of restaurants
  matches = process.extract(cuisine, restaurants['cuisine_type'], 
                            limit = restaurants.shape[0])
  
  # For each possible_match with similarity score >= 80
  for possible_match in matches:
    if possible_match[1] >= 80:
      # Find matching cuisine type
      matching_cuisine = restaurants['cuisine_type'] == possible_match[0]
      restaurants.loc[matching_cuisine, 'cuisine_type'] = cuisine

# Print unique values to confirm mapping
print(restaurants['cuisine_type'].unique())

