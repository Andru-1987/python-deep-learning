>>>>>>>>>>>>>>>>>>>>> swimming data
2015 fina world championships

1. 10 lanes in the pool (0-9)
races 1-8

2. four types of stroke: freestyle, breaststroke, butterfly

event at the world championship
1. defined by gender, distance, stroke

rounds are swimming stages

heats: first round

semifinals: penultimtate round in some events

finals: the final round and the winner is champion

data at omegatiming.com


>>>> domain specific knowledge

1. imperative
2. an absolute pleasure

>>>>>>>>> sample  swim times


# Generate x and y values for ECDF: x, y

x,y = dcst.ecdf(mens_200_free_heats)
# Plot the ECDF as dots

_ = plt.plot(x, y, marker='.', linestyle='none')
# Label axes and show plot

plt.xlabel('time (s)')
plt.ylabel('ECDF')
plt.show()


mens_200_free_heats

[118.32 107.73 107.   106.39 108.75 117.74 108.43 111.96 114.36 121.77
 108.23 107.47 118.41 108.29 106.   109.32 111.49 112.92 117.38 110.95
 108.27 111.78 107.87 110.77 109.05 111.   108.77 106.1  106.61 113.68
 108.2  106.2  111.01 109.25 112.   118.55 109.56 108.18 111.67 108.09
 110.04 113.97 109.91 112.12 111.65 110.18 116.36 124.59 115.59 121.01
 106.88 108.96 109.09 108.67 109.6  111.85 118.54 108.12 124.38 107.17
 107.48 106.65 106.91 140.68 117.93 120.66 111.29 107.1  108.49 112.43
 110.61 110.38 109.87 106.73 107.18 110.98 108.55 114.31 112.05]


>>>> sample >>> bootstrap the mean and median

import dc_stat_think as dcst

# Compute mean and median swim times
mean_time = np.mean(mens_200_free_heats)
median_time = np.median(mens_200_free_heats)

# Draw 10,000 bootstrap replicates of the mean and median
bs_reps_mean = dcst.draw_bs_reps(mens_200_free_heats, np.mean,size=10000)
bs_reps_median = dcst.draw_bs_reps(mens_200_free_heats, np.median,size=10000)


# Compute the 95% confidence intervals
conf_int_mean = np.percentile(bs_reps_mean,[2.5,97.5])
conf_int_median = np.percentile(bs_reps_median,[2.5,97.5])

# Print the result to the screen
print("""
mean time: {0:.2f} sec.
95% conf int of mean: [{1:.2f}, {2:.2f}] sec.

median time: {3:.2f} sec.
95% conf int of median: [{4:.2f}, {5:.2f}] sec.
""".format(mean_time, *conf_int_mean, median_time, *conf_int_median))

output

mean time: 111.63 sec.
95% conf int of mean: [110.48, 112.88] sec.

median time: 110.04 sec.
95% conf int of median: [108.96, 111.29] sec

>>>>>>>> do swimmers go faster in the finals than  other rounds


Event
Time
Venue
Date
Round

which swimmers does the question apply?

against what rounds will we compare?

a better comparision is between semifinals and finals

for what strokes and what distances?

specific question:
do individual female swimmers swim faster in the finals compared to the semifinals?

events with semifinals: 50,100,200 meter freestyle, breaststroke, butterfly, and backstroke


each stroke is swam at different timesL free, fly, back, and breast


Fractional improvement

f= (semifinals time - finals time)/semifinals time


>>> new question

what is the fractional improvement of individual female swimmers from the semifinals to the finals

Is the observed fractional improvement commensurate with there being no difference in performance in the semifinals and finals.  [[no difference]]


>>>>>  sample >>> fractional difference

# Compute fractional difference in time between finals and semis
f = (semi_times-final_times) / semi_times

# Generate x and y values for the ECDF: x, y
x,y=dcst.ecdf(f)

# Make a plot of the ECDF

_ = plt.plot(x, y, marker='.', linestyle='none')

# Label axes and show plot
_ = plt.xlabel('f')
_ = plt.ylabel('ECDF')
plt.show()

>>>>>> bootstrap the fractional improvement

# Mean fractional time difference: f_mean
f_mean = np.mean(f)

# Get bootstrap reps of mean: bs_reps
bs_reps = dcst.draw_bs_reps(f, np.mean,size=10000)

# Compute confidence intervals: conf_int
conf_int = np.percentile(bs_reps,[2.5,97.5])

# Report
print("""
mean frac. diff.: {0:.5f}
95% conf int of mean frac. diff.: [{1:.5f}, {2:.5f}]""".format(f_mean, *conf_int))



mean frac. diff.: 0.00040
    95% conf int of mean frac. diff.: [-0.00088, 0.00176]


It looks like the mean finals time is juuuust faster than the mean semifinal time, and they very well may be the same. We'll test this hypothesis next.


>>>>>> swap random

 def swap_random(a, b):
    """Randomly swap entries in two arrays."""
    # Indices to swap
    swap_inds = np.random.random(size=len(a)) < 0.5
    
    # Make copies of arrays a and b for output
    a_out = np.copy(a)
    b_out = np.copy(b)
    
    # Swap values
    a_out[swap_inds] = b[swap_inds]
    b_out[swap_inds] = a[swap_inds]

    return a_out, b_out


we need to generate a permutation sample by randomly swapping corresponding entries in the semi_times and final_times array.



>>>>>  sample create permutations

# Set up array of permutation replicates
perm_reps = np.empty(1000)

for i in range(1000):
    # Generate a permutation sample
    semi_perm, final_perm = swap_random(semi_times,final_times)
    
    # Compute f from the permutation sample
    f = (semi_perm - final_perm) / semi_perm
    # Compute and store permutation replicate
    perm_reps[i] = np.mean(f)

# Compute and print p-value
print('p =', np.sum(perm_reps >= f_mean) / 1000)

output

p = 0.254


The p-value is large, about 0.27, which suggests that the results of the 2015 World Championships are consistent with there being no difference in performance between the finals and semifinals.



>>>>>> how does the performance of swimmers decline over long events

800 meters is 16 lengths of the pool
split: the time it takes to swim one length of the pool

1500 meter has 30 splits
50 meter has 1 split




