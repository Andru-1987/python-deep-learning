pruning removes items with low support

Aggregation groups single items together into aggregates


load the data into onehot encoded data.

use list comprehensions to aggregate

bag_headers=[i for i in onehot.columns if i.lower().find('bag')>=0]
box_headers=[i for i in onehot.columns if i.lower().find('box')>=0]

bags=onehot[bag_headers]
boxes=onehot[box_headers]

bags=(bags.sum(axis=1)>0.0).values
boxes=(boxes.sum(axis=1)>0.0).values

aggregated = pd.DataFrame(np.vstack([bags,boxes]).T, columns=['bags','boxes'])


>>>>> The aggregation process

1. items are mapped to categories
2. compute metrics to identify useful rules
3. identify rules

aggregated.mean() #compute support


>>>>>>>>>

# Select the column headers for sign items
sign_headers = [i for i in onehot.columns if i.lower().find('sign')>=0]

# Select columns of sign items using sign_headers
sign_columns = onehot[sign_headers]

# Perform aggregation of sign items into sign category
signs = sign_columns.sum(axis = 1) >= 1.0

# Print support for signs
print('Share of Signs: %.2f' % signs.mean())

Share of Signs: 0.10

you'll notice that support for signs is 0.10, which suggests that signs are an important category of items for the retailer.


>>>>>>>

def aggregate(item):
	# Select the column headers for sign items in onehot
	item_headers = [i for i in onehot.columns if i.lower().find(item)>=0]

	# Select columns of sign items
	item_columns = onehot[item_headers]

	# Return category of aggregated items
	return item_columns.sum(axis = 1) >= 1.0

# Aggregate items for the bags, boxes, and candles categories  
bags = aggregate('bag')
boxes = aggregate('box')
candles = aggregate('candle')














