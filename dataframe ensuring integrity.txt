Possible merging issues

1. unintentional one to many relationship
2. unintentional many to many relationship

when concatenating vertically we may create duplication if the record exists in both tables.

.merge(validate=None)
1. one_to_one
2. one_to_many
3. many_to_one
4. many_to_many


tracks
1. tid
2. name
3. aid
4. mtid
5. gid
6. u_price

specs
1. tid
2. milliseconds
3. bytes

tracks.merge(specs, on='tid', validate='one_to_one')

output: Merge keys are not unique in right dataset; not a one-to-one merge


albums.merge(tracks, on='aid',
	valid='one_to_many')


>>>>>Concat
.concat(verify_integrity=True)

pd.concat([inv_feb,inv_mar], verify_integrity=True)

output: Indexes have overlapping values



>>>Sample concatenate

# Concatenate the classic tables vertically
classic_18_19 = pd.concat([classic_18,classic_19],ignore_index=True)

# Concatenate the pop tables vertically
pop_18_19 = pd.concat([pop_18,pop_19],ignore_index=True)

>>>Sample  >>> concat , merge and filter

# Concatenate the classic tables vertically
classic_18_19 = pd.concat([classic_18, classic_19], ignore_index=True)

# Concatenate the pop tables vertically
pop_18_19 = pd.concat([pop_18, pop_19], ignore_index=True)

# Merge classic_18_19 with pop_18_19
classic_pop = classic_18_19.merge(pop_18_19, on="tid")

# Using .isin(), filter classic_18_19 rows where tid is in classic_pop
popular_classic = classic_18_19[classic_18_19["tid"].isin(classic_pop["tid"])]

# Print popular chart
print(popular_classic)



