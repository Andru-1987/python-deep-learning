import numpy as np

input_data=np.array([2,3])
weights={'node_0':np.array([1,1]),
        'node_1':np.array([-1,1]),
        'output':np.array([2,-1])}
node_0_value=(input_data * weights['node_0']).sum()
node_1_value=(input_data * weights['node_1']).sum()

hidden_layer_values=np.array([node_0_value,node_1_value])
print(hidden_layer_values)

output=(hidden_layer_values * weights['output']).sum()
print(output)

>>>Adding and activation function

#adding an activation function
#ReLU (Rectified Linear Activation) 0 if x<0 and x if X>0

def relu(input):
    '''Define your relu activation function here'''
    # Calculate the value for the output of the relu function: output
    output = max(input, 0)
    
    # Return the value just calculated
    return(output)

# Calculate node 0 value: node_0_output
node_0_input = (input_data * weights['node_0']).sum()
node_0_output = relu(node_0_input)

# Calculate node 1 value: node_1_output
node_1_input = (input_data * weights['node_1']).sum()
node_1_output = relu(node_1_input)

# Put node values into array: hidden_layer_outputs
hidden_layer_outputs = np.array([node_0_output, node_1_output])

# Calculate model output (do not apply relu)
model_output = (hidden_layer_outputs * weights['output']).sum()

# Print model output
print(model_output)

>>Making multiple predictions

# Define predict_with_network()
def predict_with_network(input_data_row, weights):

    # Calculate node 0 value
    node_0_input = (input_data_row * weights['node_0']).sum()
    node_0_output = relu(node_0_input)

    # Calculate node 1 value
    node_1_input = (input_data_row * weights['node_1']).sum()
    node_1_output = relu(node_1_input)

    # Put node values into array: hidden_layer_outputs
    hidden_layer_outputs = np.array([node_0_output, node_1_output])
    
    # Calculate model output
    input_to_final_layer = (hidden_layer_outputs * weights['output']).sum()
    model_output = relu(input_to_final_layer)
    
    # Return model output
    return(model_output)


# Create empty list to store prediction results
results = []
for input_data_row in input_data:
    # Append prediction to results
    results.append(predict_with_network(input_data_row, weights))

# Print results
print(results)


>>> Create two hidden layers

def predict_with_network(input_data):
    # Calculate node 0 in the first hidden layer
    node_0_0_input = (input_data * weights['node_0_0']).sum()
    node_0_0_output = relu(node_0_0_input)

    # Calculate node 1 in the first hidden layer
    node_0_1_input = (input_data * weights['node_0_1']).sum()
    node_0_1_output = relu(node_0_1_input)

    # Put node values into array: hidden_0_outputs
    hidden_0_outputs = np.array([node_0_0_output, node_0_1_output])
    
    # Calculate node 0 in the second hidden layer
    node_1_0_input = (hidden_0_outputs * weights['node_1_0']).sum()
    node_1_0_output = relu(node_1_0_input)

    # Calculate node 1 in the second hidden layer
    node_1_1_input = (hidden_0_outputs * weights['node_1_1']).sum()
    node_1_1_output = relu(node_1_1_input)

    # Put node values into array: hidden_1_outputs
    hidden_1_outputs = np.array([node_1_0_output, node_1_1_output])

    # Calculate model output: model_output
    model_output = relu((hidden_1_outputs * weights['output']).sum())
    
    # Return model_output
    return(model_output)

output = predict_with_network(input_data)
print(output)

>> Adjust Error

# The data point you will make a prediction for
input_data = np.array([0, 3])

# Sample weights
weights_0 = {'node_0': [2, 1],
             'node_1': [1, 2],
             'output': [1, 1]
            }

# The actual target value, used to calculate the error
target_actual = 3

# Make prediction using original weights
model_output_0 = predict_with_network(input_data, weights_0)

# Calculate error: error_0
error_0 = model_output_0 - target_actual

# Create weights that cause the network to make perfect prediction (3): weights_1
weights_1 = {'node_0': [2, 1],
             'node_1': [1, 2],
             'output': [1, 0]
            }

# Make prediction using new weights: model_output_1
model_output_1 =predict_with_network(input_data, weights_1)

# Calculate error: error_1
error_1 = model_output_1 - target_actual

# Print error_0 and error_1
print(error_0)
print(error_1)

>>mean squared error

from sklearn.metrics import mean_squared_error

# Create model_output_0 
model_output_0 = []
# Create model_output_1
model_output_1 = []

# Loop over input_data
for row in input_data:
    # Append prediction to model_output_0
    model_output_0.append(predict_with_network(row, weights_0))
    
    # Append prediction to model_output_1
    model_output_1.append(predict_with_network(row, weights_1))

# Calculate the mean squared error for model_output_0: mse_0
mse_0 = mean_squared_error(target_actuals, model_output_0)

# Calculate the mean squared error for model_output_1: mse_1
mse_1 = mean_squared_error(target_actuals, model_output_1)

# Print mse_0 and mse_1
print("Mean squared error with weights_0: %f" %mse_0)
print("Mean squared error with weights_1: %f" %mse_1)


Gradient Descent
if the slope is positive, going opposite the slope means moving to lower numbers
subtract the slope from the current value
the learning rate is an update to the weight by subtracting learning rate * slope


to calculate the slope for a weight:
1. slope of the loss function w.r.t value at the node we feed into
a. 2(predicted value - actual value)=2*Error
2. value of the node that feeds into our weight
3. slope of the activation function w.r.t value we feed into


import numpy as np
weights=np.array([1,2])
input_data=np.array([3,4])
target=5
learning_rate=0.01
preds=(weights*input_data).sum()
error=preds-target
print(error)

gradient=2 * input_data * error
weights_updated=weights - learning_rate * gradient
preds_update=(weights_updated * input_data).sum()
error_updated=preds_updated - target
print(error_updated)


You're now going to practice calculating slopes. When plotting the mean-squared error loss function against predictions, the slope is 2 * x * (xb-y), or 2 * input_data * error. Note that x and b may have multiple numbers (x is a vector for each data point, and b is a vector). In this case, the output will also be a vector, which is exactly what you want. 

# Calculate the predictions: preds
preds = (weights*input_data).sum()

# Calculate the error: error
error = preds - target

# Calculate the slope: slope
slope = 2 * input_data * errorc

# Print the slope
print(slope)


>>adjusting weights using the learning rate

# Set the learning rate: learning_rate
learning_rate = 0.01

# Calculate the predictions: preds
preds = (weights * input_data).sum()

# Calculate the error: error
error = preds - target

# Calculate the slope: slope
slope = 2 * input_data * error

# Update the weights: weights_updated
weights_updated = weights-learning_rate * slope

# Get updated predictions: preds_updated
preds_updated = (weights_updated*input_data).sum()

# Calculate updated error: error_updated
error_updated = preds_updated - target

# Print the original error
print(error)

# Print the updated error
print(error_updated)

>>iteratively improving the error

n_updates = 20
mse_hist = []

# Iterate over the number of updates
for i in range(n_updates):
    # Calculate the slope: slope
    slope = get_slope(input_data, target, weights)
    
    # Update the weights: weights
    weights = weights - 0.01 * slope
    
    # Calculate mse with new weights: mse
    mse = get_mse(input_data, target, weights)
    
    # Append the mse to mse_hist
    mse_hist.append(mse)

# Plot the mse history
plt.plot(mse_hist)
plt.xlabel('Iterations')
plt.ylabel('Mean Squared Error')
plt.show()


>> backpropagation process

Trying to estimate the slope of the loss function w.r.t each weight

Go back one layer at a time
Gradients for weight is product of:
1. node value feeding into that weight
2. slope of loss function w.r.t node its feeds into
3. slope of activation function at the node it feeds into

The slope of node values are the sum of the slopes for all weights that come out of them

>>slope for a weight

2(predicted value - actual value)=2*Error

Gradient for weight is product of:
1. node value feeding into that weight
2. Slope of activation function for the node being fed into
3. Slope of loss function w.r.t output node


>>keras model
1. specify architecture
2. compile
3. fit
4. predict

import numpy as np
from keras.layers import Dense
from keras.models import Sequential

predictors=np.loadtxt('predictors_data.csv',delimiter=',')
#number of nodes in the input layer
n_cols=predictors.shape[1]

model=Sequential()
model.add(Dense(100, activation='relu', input_shape=(n_cols,)))
model.add(Dense(100, activation='relu'))
model.add(Dense(1))

>>compiling the mode

1. Specify the optimizer
2. Adam optimizer

loss function
1. mean_squared_error common for regression

model.compile(optimizer='adam', loss='mean_squared_error')


scale the data before fitting to ease optimization

model.fit(predictors, target)


>>>classification

model.compile(optimizer='adam', loss='categorical_crossentropy' metrics=['accuracy'])

activation='softmax'

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
import keras
from keras.utils.np_utils import to_categorical
from keras.layers import Dense
from keras.models import Sequential

from sklearn.datasets import load_iris

iris=load_iris()
predictors=iris.data
#print(type(iris.data))
target=to_categorical(iris.target)

n_cols=predictors.shape[1]
print(n_cols)

model=Sequential()
model.add(Dense(100, activation='softmax', input_shape=(n_cols,)))
model.add(Dense(100, activation='softmax'))
model.add(Dense(3))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(predictors, target)

>>saving
model.save('model_file.h5')
my_model=load_model('model_file.h5')
predictions=my_model.predict(data_to_predict_with)
probablity_true=predictions[:,1]
prin(my_model.summary())


>>Prediction

print(pred_data)
# Calculate predictions: predictions
predictions = model.predict(pred_data)
# Calculate predicted probability of survival: predicted_prob_true
predicted_prob_true = predictions[:,1]

# print predicted_prob_true
print(predicted_prob_true)


>>>Optimization is a hard problem

1. simulateously optimizing 1000s of parameters with complex relationships
2. updates may not update the model meaningfully

#stocastic gradient descent
from keras.optimizers import SGD

# Create list of learning rates: lr_to_test
lr_to_test = [.000001, 0.01, 1]

# Loop over learning rates
for lr in lr_to_test:
    print('\n\nTesting model with learning rate: %f\n'%lr )
    
    # Build new model to test, unaffected by previous models
    model = get_new_model()
    
    # Create SGD optimizer with specified learning rate: my_optimizer
    my_optimizer = SGD(lr=lr)
    
    # Compile the model
    model.compile(optimizer=my_optimizer, loss='categorical_crossentropy')
    
    # Fit the model
    model.fit(predictors, target)


>>Validation in deep learning

1. commonly use validation split rather than cross validation
2. deep learning widely used on large datasets
3. single validation score is based on large amount of data, and is reliable


iris=load_iris()
predictors=iris.data
#print(type(iris.data))
target=to_categorical(iris.target)

n_cols=predictors.shape[1]
print(n_cols)

early_stopping_monitor=EarlyStopping(patience=3)

model=Sequential()
model.add(Dense(100, activation='relu', input_shape=(n_cols,)))
model.add(Dense(100, activation='relu'))
model.add(Dense(100, activation='relu'))
model.add(Dense(3, activation='softmax'))

myOptimizer=SGD(0.1)
#model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.compile(optimizer=myOptimizer, loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(predictors, target,callbacks=[early_stopping_monitor],  nb_epoch=28)


>>Plot epochs

# Define early_stopping_monitor
early_stopping_monitor = EarlyStopping(patience=2)

# Create the new model: model_2
model_2 = Sequential()

# Add the first and second layers
model_2.add(Dense(100,activation='relu', input_shape=input_shape))
model_2.add(Dense(100,activation='relu'))

# Add the output layer
model_2.add(Dense(2, activation='softmax'))

# Compile model_2
model_2.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Fit model_1
model_1_training = model_1.fit(predictors, target, epochs=15, validation_split=0.2, callbacks=[early_stopping_monitor], verbose=False)

# Fit model_2
model_2_training = model_2.fit(predictors, target, epochs=15, validation_split=0.2, callbacks=[early_stopping_monitor], verbose=False)

# Create the plot
plt.plot(model_1_training.history['val_loss'], 'r', model_2_training.history['val_loss'], 'b')
plt.xlabel('Epochs')
plt.ylabel('Validation score')
plt.show()


>>Plot accuracy

# The input shape to use in the first hidden layer
input_shape = (n_cols,)

# Create the new model: model_2
model_2 = Sequential()

# Add the first, second, and third hidden layers
model_2.add(Dense(50,activation='relu', input_shape=input_shape))
model_2.add(Dense(50,activation='relu'))
model_2.add(Dense(50,activation='relu'))

# Add the output layer
model_2.add(Dense(2, activation='softmax'))

model_2.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])


# Fit model 1
model_1_training = model_1.fit(predictors, target, epochs=20, validation_split=0.2, callbacks=[early_stopping_monitor], verbose=False)

# Fit model 2
model_2_training = model_2.fit(predictors, target, epochs=20, validation_split=0.3, callbacks=[early_stopping_monitor], verbose=False)

plt.figure()
# Create the plot
plt.plot(model_1_training.history['val_acc'], 'r', model_2_training.history['val_acc'], 'b')
plt.xlabel('Epochs')
plt.ylabel('Validation score')
plt.show()


>>overfitting

on overfitting the model will make accurate predictions on training data, but inaccurate results on test data and new data sets.

model capacity is the able for the model to make accurate predictions.  The more capacity the more accuracy in prediction.

1. more nodes increase capacity
2. more layers increase capacity


Workflow
1. start with a small network
2. gradually increase capacity
3. keep increasing capacity until validation score is no longer improving.

save and load model

model.save_weights("model.h5")
model.load_weights("model.h5")





















        