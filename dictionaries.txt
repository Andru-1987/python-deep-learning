art_galleries={}

for name, zip_code in galleries:
	art_galleries[name]=zip_code



.get() method allows you to safely access a key without error or exception handling - nothing found returns none

art_galleries.get('Louvre','Not Found')


nesting dictionaries is a common way to dealing with repeating data structures.

>>>>>>>>>

# Create an empty dictionary: names_by_rank
names_by_rank={}
# Loop over the girl names
for rank,name in female_baby_names_2012.items():
    # Add each name to the names_by_rank dictionary using rank as the key
    names_by_rank[rank]=name
    
# Sort the names_by_rank dict by rank in descending order and slice the first 10 items
for rank in sorted(names_by_rank,reverse=True)[:10]:
    # Print each item
    print(names_by_rank[rank])


>>>>>>


# Safely print rank 7 from the names dictionary
print(names[7])

# Safely print the type of rank 100 from the names dictionary
print(type(names.get(100)))

# Safely print rank 105 from the names dictionary or 'Not Found'
print(names.get(105,'No Found'))

CHAYA
<class 'NoneType'>
No Found

>>>>

# Print a list of keys from the boy_names dictionary
print(boy_names.keys())

# Print a list of keys from the boy_names dictionary for the year 2013
print(boy_names.get(2013).keys())

print(boy_names)
# Loop over the dictionary
for year in boy_names:
    # Safely print the year and the third ranked name or 'Unknown'
    print(year, boy_names[year].get(3, 'Unknown'))

>>>>> pythonic dictionary coding

adding and extending dictionaries

for gallery, phone_num in art_galleries.items():
	print(gallery)

'11234' in art_galleries

returns a true or false

if '10010' in art_galleries:
	print('found')


>>>>>>>

# Iterate over the 2014 nested dictionary
for rank,name in baby_names[2014].items():
    # Print rank and name
    print(rank,name)
    
# Iterate over the 2012 nested dictionary

for rank,name in baby_names[2012].items():
    # Print rank and name
    print(rank,name)   

>>>>

# Check to see if 2011 is in baby_names
if '2011' in baby_names:
    # Print 'Found 2011'
    print('Found 2011')
    
# Check to see if rank 1 is in 2012
if 1 in baby_names[2012]:
    # Print 'Found Rank 1 in 2012' if found
    print('Found Rank 1 in 2012')
else:
    # Print 'Rank 1 missing from 2012' if not found
    print('Rank 1 missing from 2012')
    
# Check to see if Rank 5 is in 2013
if 5 in baby_names[2013]:
   # Print 'Found Rank 5'
   print('Found Rank 5')




>>>>>>>>>>>>>> Dictionaries of unknown structure - Defaultdict

saving complex structures under values


for park_id, name in nyc_eateries_parks:
	if park_id not in eateries_by_park:
		eateries_by_park[park_id]=[]
	eateries_by_park[park_id].append(name)

print(eateries_by_park['M010'])

defaultdict set the type for every key even if it doesn't currently exist and it works exactly like a dictionary.


for collections import defaultdict

eateries_by_park = defaultdict(list)

for park_id, name in nyc_eateries_parks:
	eateries_by_park[park_id].append(name)

print(eateries_by_park['M010'])

>>>>

from collections import defaultdict

eatery_contact_types = defaultdict(int)

for eatery in nyc_eateries:
	if eatery.get('phone'):
		eatery_contact_types['phones']+=1
	if eatery.get('website'):
		eatery_contact_types['websites']+=1


>>>>>>>>


# Create an empty dictionary: ridership
ridership = {}

# Iterate over the entries
for date,stop,riders in entries:
    # Check to see if date is already in the ridership dictionary
    if date not in ridership:
        # Create an empty list for any missing date
        ridership[date] = []
    # Append the stop and riders as a tuple to the date keys list
    ridership[date].append((stop,riders))
    
# Print the ridership for '03/09/2016'
print(ridership['03/09/2016'])


>>>>>>


# Import defaultdict
from collections import defaultdict

# Create a defaultdict with a default type of list: ridership
ridership = defaultdict(list)

# Iterate over the entries
for date,stop,riders in entries:
    # Use the stop as the key of ridership and append the riders to its value
    ridership[stop].append(riders)
    
# Print the first 10 items of the ridership dictionary
print(list(ridership.items())[:10])


