inner join

-- 3. Select fields with aliases
SELECT c.code AS country_code, name, year, inflation_rate
FROM countries AS c
  -- 1. Join to economies (alias e)
  inner JOIN economies as e
    -- 2. Match on code
    ON c.code = e.code;

>>>>>>>using  

select left_table.id as L_id,
left_table.val as L_val,
right_table.val as R_val
from left_table
inner join right_table
using(id)


SELECT c.name as country, c.continent,l.name as language, l.official
FROM countries c
  INNER JOIN languages l
    USING(code)

>>>>>>> selfish joins

select p.country as country1, p2.country as country2, p1.continent
from prime_ministers as p1
inner join prime_ministers as p2
on p1.continent=p2.continent
and p1.country<>p2.country
limit 14

sample

-- 4. Select fields with aliases
select
p1.country_code,
p1.size size2010,
p2.country_code,
p2.size size2015
from populations p1
join populations p2
on p1.country_code=p2.country_code
where p1.year=2010
and p2.year=2015

sample

-- 5. Select fields with aliases
SELECT p1.country_code,
       p1.size AS size2010,
       p2.size AS size2015
-- 1. From populations (alias as p1)
FROM populations as p1
  -- 2. Join to itself (alias as p2)
  inner JOIN populations as p2
    -- 3. Match on country code
    ON p1.country_code = p2.country_code
        -- 4. and year (with calculation)
       and p1.year=p2.year-5

sample

SELECT p1.country_code,
       p1.size AS size2010, 
       p2.size AS size2015,
       -- 1. calculate growth_perc
       ((p1.size - p2.size)/p1.size * 100.0) AS growth_perc
-- 2. From populations (alias as p1)
FROM populations AS p1
  -- 3. Join to itself (alias as p2)
  INNER JOIN populations AS p2
    -- 4. Match on country code
    ON p1.country_code = p2.country_code
        -- 5. and year (with calculation)
        AND p1.year = p2.year - 5;c

sample

SELECT name, continent, code, surface_area,
    -- 1. First case
    CASE WHEN surface_area > 2000000 THEN 'large'
        -- 2. Second case
        WHEN surface_area > 350000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name
        AS geosize_group
-- 5. From table
FROM countries;

SELECT country_code, size,
    -- 1. First case
    CASE WHEN size > 50000 THEN 'large'
        -- 2. Second case
        WHEN size > 1000000 THEN 'medium'
        -- 3. Else clause + end
        ELSE 'small' END
        -- 4. Alias name (popsize_group)
        AS popsize_group
-- 5. From table
FROM populations
-- 6. Focus on 2015
WHERE year = 2015;


SELECT country_code, size,
    CASE WHEN size > 50000000 THEN 'large'
        WHEN size > 1000000 THEN 'medium'
        ELSE 'small' END
        AS popsize_group
-- 1. Into table
into pop_plus
FROM populations
WHERE year = 2015;

-- 2. Select all columns of pop_plus
select * from pop_plus


SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;

-- 5. Select fields
select
name, continent, geosize_group,popsize_group
-- 1. From countries_plus (alias as c)
from countries_plus as c
  -- 2. Join to pop_plus (alias as p)
  inner join pop_plus as p
    -- 3. Match on country code
    on c.code=p.country_code
-- 4. Order the table    
order by geosize_group desc;

>>>>>>>left and right join
-- Select the city name (with alias), the country code,
-- the country name (with alias), the region,
-- and the city proper population
SELECT c1.name AS city_name, code, c2.name AS country_name,
       region, city_proper_pop
-- From left table (with alias)
FROM cities AS c1
  -- Join to right table (with alias)
  inner JOIN countries AS c2
    -- Match on country code
    ON c1.country_code = c2.code
-- Order by descending country code
ORDER BY code desc;


>>>>>> full joins

combines the results of the left join and the right join between the two tables.

SELECT name AS country, code, region, basic_unit
-- 3. From countries
FROM countries
  -- 4. Join to currencies
  FULL JOIN currencies
    -- 5. Match on code
    USING (code)
-- 1. Where region is North America or null
WHERE region = 'North America' OR region IS null
-- 2. Order by region
ORDER BY region;


SELECT countries.name, code, languages.name AS language
-- 3. From languages
FROM languages
  -- 4. Join to countries
  FULL JOIN countries
    -- 5. Match on code
    USING (code)
-- 1. Where countries.name starts with V or is null
WHERE countries.name LIKE 'V%' OR countries.name IS NULL
-- 2. Order by ascending countries.name
ORDER BY countries.name;

>>>>>>> cross join


select prime_minister, president
from prime_ministers as p1
cross join presidents as p2
where p1.continent in ('North America', 'Oceania')


-- 4. Select fields
SELECT c.name as city, l.name as language
-- 1. From cities (alias as c)
FROM cities AS c        
  -- 2. Join to languages (alias as l)
  CROSS JOIN languages AS l
-- 3. Where c.name like Hyderabad
WHERE c.name LIKE 'Hyder%';


>>>>>> union

union - does not double count in both tables
intersect - matching in both tables
union all - does double count in both tables
except - one table and not the other

select prime_minister as leader, country
from prime_ministers
union
select monarch, country
from monarchs
order by country

-- Select fields from 2010 table
select e1.code code,e1.year
  -- From 2010 table
  from economies2010 e1
	-- Set theory clause
	union
-- Select fields from 2015 table
select e2.code code,e2.year
  -- From 2015 table
  from economies2015 e2
-- Order by code and year
order by code and year;

-- Select field
select country_code
  -- From cities
  from cities
	-- Set theory clause
	union
-- Select field
select code country_code
  -- From currencies
  from currencies
-- Order by country_code
order by country_code;

select code code, year
  -- From cities
  from economies
	-- Set theory clause
	union all
-- Select field
select country_code code, year
  -- From currencies
  from populations
-- Order by country_code
order by code, year

select code code, year
  -- From cities
  from economies
	-- Set theory clause
	intersect
-- Select field
select country_code code, year
  -- From currencies
  from populations
-- Order by country_code
order by code, year


>>>>> except


-- Select field
SELECT c1.name AS city_name
-- From left table (with alias)
FROM cities AS c1
	-- Set theory clause
	except
-- Select field
SELECT c2.capital city_name
  -- From countries
  FROM countries c2
-- Order by result
ORDER BY city_name;


>>>>> semi-joins and anti-joins

select president, country, continent
from presidents
where country in
(select name from states where indep_year < 1800)

select president, country, continent
from presidents
where continent like '%America'
and country not in
(
select name from states where indep_year < 1800)

semi join (matches by key field records in the left table matching with the right table)

anti join (picks out rows on the left table that do not match conditions on the right table)

sample

-- Select code
select code
  -- From countries
  from countries
-- Where region is Middle East
where region ='Middle East';


-- Select field
select distinct name
  -- From languages
  from languages
-- Order by name
order by name;

sample

-- Select distinct fields
select distinct name
  -- From languages
  from languages
-- Where in statement
WHERE code IN
  -- Subquery
  (select code from countries where region='Middle East')
-- Order by name
order by name;


-- Select statement
select count(distinct name) number_of_countries
  -- From countries
  from countries
-- Where continent is Oceania
where continent='Oceania';

-- 5. Select fields (with aliases)
select 
c1.code,
c1.name,
c2.basic_unit as currency
  -- 1. From countries (alias as c1)
  from countries as c1
  	-- 2. Join with currencies (alias as c2)
  	join currencies as c2
    -- 3. Match on code
    on c1.code=c2.code
-- 4. Where continent is Oceania
where c1.continent='Oceania';

-- 3. Select fields
select *
  -- 4. From Countries
  from countries
  -- 5. Where continent is Oceania
  where continent='Oceania'
  	-- 1. And code not in
  	and code not in
  	-- 2. Subquery
  	(select code from currencies);


-- Select the city name
select name
  -- Alias the table where city name resides
  from cities AS c1
  -- Choose only records matching the result of multiple set theory clauses
  WHERE c1.country_code IN
(
    -- Select appropriate field from economies AS e
    SELECT e1.code
    FROM economies e1
    -- Get all additional (unique) values of the field from currencies AS c2  
    union
    SELECT c2.code
    FROM currencies AS c2
    -- Exclude those appearing in populations AS p
    except
    SELECT p.country_code
    FROM populations AS p
);

>>>>> where and select clauses

select name, fert_rate
from states
where continent='Asia'
and fert_rate< (select avg(fert_rate) from states)


select distinct continent,
(select count(*) from states wher prime_ministers.continent=states.continent) ass countries_num
from prime_ministers

-- Select fields
select * 
  -- From populations
  from populations
-- Where life_expectancy is greater than
where life_expectancy>
1.15 * (SELECT AVG(life_expectancy)
   FROM populations
   WHERE year = 2015)
  and year=2015
  ;5

-- 2. Select fields
select name city_name,country_code, urbanarea_pop
  -- 3. From cities
  from cities
-- 4. Where city name in the field of capital cities
where name IN
  -- 1. Subquery
  (select capital from countries)
ORDER BY urbanarea_pop DESC;


SELECT countries.name as country,
  (SELECT count(*)
   FROM cities
   WHERE countries.code = cities.country_code) AS cities_num
FROM countries
ORDER BY cities_num desc, country
LIMIT 9


>>>>>>> subquery inside the from clause

select continent, max(women_parli_perc) as max_perc
from states
group by continent
order by continent


select distinct monarchs.continent, subquery.max_perc
from monarchs
(select continent, Max(women_parli_perc) as max_perc
from states
group by continent) as subquery
where monarchs.continent = subquery.continent
order by continent

sample

-- Select fields (with aliases)
select code,
count(*) lang_num
  -- From languages
  from languages
-- Group by code
group by code;

-- Select fields
select countries.code,subquery.lang_num 
  -- From countries
  from countries,
	(select code,
count(*) lang_num
  -- From languages
  from languages
-- Group by code
group by code) AS subquery
  -- Where codes match
  where countries.code=subquery.code
-- Order by descending number of languages
order by subquery.lang_num;    


-- Select fields
select countries.name, countries.continent, max(economies.inflation_rate) inflation_rate
  from countries
  	-- Join to economies
    join economies
    on countries.code=economies.code
    where year = 2015
    group by countries.name, continent
;


-- Select the maximum inflation rate as max_inf
select continent, max(subquery.inflation_rate) inflation_rate
  -- Subquery using FROM (alias as subquery)
  FROM (-- Select fields
select countries.name, countries.continent, max(economies.inflation_rate) inflation_rate
  -- From countries
  from countries
  	-- Join to economies
    join economies
    on countries.code=economies.code
    where year = 2015
    group by countries.name, continent
) AS subquery
-- Group by continent
group by continent;








