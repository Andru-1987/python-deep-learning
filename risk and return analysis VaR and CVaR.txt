portfolio weights maximize return given risk level

efficient frontier: locus of risk,return points generated by different efficient portfolios
a. each point = portfolio weight optimization

creation of efficient portfolio/frontier modern portfolio theory often called mean-variance optimization
1. gives the highest expected return given the risk level as a variance

VaR and CVaR return what we expect to loss according to a distribution

strategy we look for the weights the minimize the expected conditional loss at a given confidence level

look for the CVaR with the portfolio with the lowest level of loss


cs = CovarianceShrinkage(prices)
e_cov = cs.ledoit_wolf()

ef=pypfopt.efficient_frontier.EfficientFrontier(None, e_cov)


from pypfopt.objective_functions import negative_cvar

optimal_weights = ef.custom_objective(negative_cvar,returns)


the objective function needs to be negative of CVaR returns
minimizing CVaR losses

>>>>>>>

ef=pypfopt.efficient_frontier.EfficientFrontier(None, e_cov)

min_vol_weights=ef.min_volatility()

the minimum volume of shares to be held by stock in the portfolio

>>>>>
min_cvar_weights=ef.custom_objective(negative_cvar,returns)
print(min_cvar_weights)


>>>>>>>>>>>>> Minimizing CVaR requires calculating the VaR at a confidence level, say 95%.


# Visualize the fitted distribution with a plot
x = np.linspace(-0.25,0.25,1000)
plt.plot(x,fitted.evaluate(x))
plt.show()

# Create a random sample of 100,000 observations from the fitted distribution
sample = fitted.resample(100000)

#Resampling from a fitted distribution is a common technique to build statistics such as quantiles, which are needed for VaR risk measurement.

# Compute and display the 95% VaR from the random sample
VaR_95 = np.quantile(sample, 0.95)
print(VaR_95)


>>>>>> getting optimal weights

# Import the EfficientFrontier class
from pypfopt.efficient_frontier import EfficientFrontier

# Import the negative_cvar objective function
from pypfopt.objective_functions import negative_cvar

# Create the efficient frontier instance
ef = EfficientFrontier(None, e_cov)

# Find the cVar-minimizing portfolio weights at the default 95% confidence level
optimal_weights = ef.custom_objective(negative_cvar, returns)

# Display the optimal weights
print(optimal_weights)

>>>>>>> finding the efficient frontier

# Initialize the efficient portfolio dictionary
ef_dict = {}

# For each epoch, assign an efficient frontier instance to ef
for x in ['before', 'during', 'after']: 
    ef_dict[x] = EfficientFrontier(None, e_cov_dict[x])


# Initialize the dictionary of optimal weights
optimal_weights_dict = {}

# Find and display the CVaR-minimizing portfolio weights at the default 95% confidence level
for x in ['before', 'during', 'after']:
    optimal_weights_dict[x] = ef_dict[x].custom_objective(negative_cvar, returns_dict[x])

# Compare the CVaR-minimizing weights to the minimum volatility weights for the 'before' epoch
print("CVaR:\n", pd.DataFrame.from_dict(optimal_weights_dict['before']), "\n")
print("Min Vol:\n", pd.DataFrame.from_dict(min_vol_dict['before']), "\n")


{'before': {'Citibank': 0.2494217728981686, 'Morgan Stanley': 0.2505202273167665, 'Goldman Sachs': 0.25068342492740403, 'J.P. Morgan': 0.24937457485766076}, 
'during': {'Citibank': 0.24954004793748474, 'Morgan Stanley': 0.24955093558498367, 'Goldman Sachs': 0.2509334876751775, 'J.P. Morgan': 0.24997800940569118}, 
'after': {'Citibank': 0.24925495813616677, 'Morgan Stanley': 0.24955500691609753, 'Goldman Sachs': 0.25014069224760227, 'J.P. Morgan': 0.25112746098234223}}

Volume
{'before': {'Citibank': 0.655620995582187, 'Morgan Stanley': 0.05903293586555642, 'Goldman Sachs': 0.029724657495515394, 'J.P. Morgan': 0.25562141105674113}, 
'during': {'Citibank': 3.2959746043559335e-17, 'Morgan Stanley': 0.0, 'Goldman Sachs': 0.5179899595067168, 'J.P. Morgan': 0.4820100404932833}, 
'after': {'Citibank': 2.541098841762901e-18, 'Morgan Stanley': 0.03497149236044365, 'Goldman Sachs': 0.8641422809417034, 'J.P. Morgan': 0.10088622669785287}}


The minimum variance portfolio during and after the crisis does not contain Citibank, while the CVaR-minimizing portfolio is nearly equal-weighted throughout the crisis.













