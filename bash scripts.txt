bash : bourne again shell

1. ease of execution of shell commands
2. powerful programming constructs

basic commands: 
grep : filters input based on regex pattern matching
cat: concatenates files contents line-by-line
wc: word or line count
sed: pattern-matched string replacement

regex101.com to test your expressions

grep 'a' fruits.txt

[] creates a set
^ inverse the set

grep '[pc]' fruits.txt


sort | uniq -c    

sort then distinct count

cat new_fruits.txt | sort | uniq -c | head -n 3

gives the n fruits from the pipe

>>>>>>
cat soccer_scores.csv | grep 1959

cat two_cities.txt| grep "Syndey Carton\|Charles Darnay" | wc -l

where -l is line count -w is word count

>>>>>>>>>>>>>>>>>Bash script

#!/usr/bash
or
#!/bin/bash

use which bash to determine the bash binary location


bash script_name.sh or ./script_name

each line of your bash script can be a shell command

therefore, you can also include pipes in your bash scripts


count the number of animals in each group

magpie, bird
emu, bird
kangaroo, marsupial
wallaby, marsupial
shark, fish


cat animals.txt | cut -d " " -f 2 | sort | uniq -c

2 bird
1 fish
2 marsupial

cut splits on spaces -f 2 takes the second field

cat soccer_scores.csv | cut -d "," -f 2 | tail -n +2 | sort | wc -c

cat soccer_scores.csv | sed 's/Cherno/Cherno City/g' | sed 's/Arda/Arda United/g' > soccer_scores_edited.csv

>>>>>>> Standard streams & arguments

stdin: standard input
stdout: standard output
stderr: errors in your program

> /dev/null redirecting stderr to be deleted

if an error occurs at any time it will display in the terminal


cat sports.txt > new_sports.txt

cat outputs the content of the first file into the output stream file


bash scripts take arguments to be used inside by adding a space after the script execution call

argv is the array of all the arguments given to the program

each argument can be access via the $ notation.  the first as $1 and the second as $2 etc

$@ and $* return all the arguments together
$# is the number of arguments

>>>>>

# Echo the first and second ARGV arguments
echo $1 
echo $2

# Echo out the entire ARGV array
echo $*

# Echo out the size of ARGV
echo $#


>>>>>

# Echo the first ARGV argument
echo $1 

# Cat all the files
# Then pipe to grep using the first ARGV argument
# Then write out to a named csv using the first ARGV argument
cat hire_data/* | grep "$1" > "$1".csv


>>>>>> assigning variables

var1="Moon"

echo $var1

firstname='Cynthia'
lastname='Liu'

echo "Hi there " $firstname $lastname

you must not add spaces around the equal sign when assigning variables

single quotes = shell intreprets what is between literally

backticks (`something`) creates a shell within a shell and captures stdout back into a variable

now_var='NOW'

now_var_singlequote='$now_var'

echo $now_var_singlequote

outputs: $now_var

now_var_doublequote="$now_var"

echo $now_var_doublequote

outputs: NOW

rightnow_doublequote="the date is `date`."
echo $rightnow_doublequote

output: the date is Fri Aug 27 09:37:40 MDT 2021.

rightnow_parenthese="The date is $(date)."
echo $rightnow_parenthese


>>>>>

# Create the required variable
yourname="Sam"

# Print out the assigned name (Help fix this error!)
echo "Hi there $yourname, welcome to the website!"


>>>>>>>>>>numeric variables in bash

you can do arthimetic in bash

expr is a arthimetic utility

expr 1 + 4

expr can not handle decimal places

bc (basic calculator)

echo "5+7.5" | bc

echo "scale=3; 10/3" | bc

echo $((5 + 7))


model1=87.65
model2=89.20
echo "The total score is $(echo "$model1 + $model2" | bc)"
echo "The avg score is $(echo "scale=2;($model1 + $model2)/2" | bc)"


>>>>>

# Get first ARGV into variable
temp_f=$1

# Subtract 32
temp_f2=$(echo "scale=2; $temp_f - 32" | bc)

# Multiply by 5/9 and print
temp_c=$(echo "scale=2; $temp_f2 * 5 / 9" | bc)

# Print the celsius temp
echo $temp_c

>>>>>>

# Create three variables from the temp data files' contents
temp_a=$(cat temps/region_A)
temp_b=$(cat temps/region_B)
temp_c=$(cat temps/region_C)

# Print out the three variables
echo "The three temperatures were $temp_a, $temp_b, and $temp_c"


>>>>> arrays in bash

two types of arrays in bash: 1. normal (numerical indexed array) 2. associative array

declare -a my_first_array
or
my_first_array(1 2 3)

bash separates values with spaces not commas

echo ${my_first_array[@]}
output: 1 2 3

echo ${#my_first_array[@]}
output 3 producing the length of the array


my_first_array=(15 20 300 42)
echo ${#my_first_array[2]}

output: 300

returns the 3rd element in the array

mY-first_array[0]=999

don't use the $ notation when initializing and array

slicing arrays
array[@]:N:M

N is the starting indices
M is the number of numbers to return after N

appending to array using array+=(elements)

my_array+=(10)

>>>> associate arrays similar to a dictionary

declare -A city_details
city_details=([city_name]="New York" [population]=1400000)

declare -A city_details=([city_name]="New York" [population]=1400000)

echo ${!city_details[@]}

! returns the keys

>>>>>>

# Create a normal array with the mentioned elements
capital_cities=("Sydney" "New York" "Paris")

>>>>>>

# Declare associative array with key-value pairs on one line
declare -A model_metrics=([model_accuracy]=98 [model_name]="knn" [model_f1]=0.82)

# Print out the entire array
echo ${model_metrics[@]}

>>>>>>

# An associative array has been created for you
declare -A model_metrics=([model_accuracy]=98 [model_name]="knn" [model_f1]=0.82)

# Print out just the keys
echo ${!model_metrics[@]}



# Create a normal array with the mentioned elements using the declare method
declare -a capital_cities

# Add (append) the elements
capital_cities+=("Sydney")
capital_cities+=("New York")
capital_cities+=("Paris")

>>>>>>

# The array has been created for you
capital_cities=("Sydney" "New York" "Paris")

# Print out the entire array
echo ${capital_cities[@]}

# Print out the array length
echo ${#capital_cities[@]}


>>>>>>>

# Create empty associative array
declare -A model_metrics

# Add the key-value pairs
model_metrics[model_accuracy]=98
model_metrics[model_name]="knn"
model_metrics[model_f1]=0.82


>>>>>>>>


# Create variables from the temperature data files
temp_b="$(cat temps/region_B)"
temp_c="$(cat temps/region_C)"

# Create an array with these variables as elements
region_temps=($temp_b $temp_c)

# Call an external program to get average temperature
average_temp=$(echo "scale=2; (${region_temps[0]} + ${region_temps[1]}) / 2" | bc)

# Append average temp to the array
region_temps+=($average_temp)

# Print out the whole array
echo ${region_temps[@]}

>>>>>>>>>>> if statements

if [ condition ]; then
	#some code
else
	#some other code
fi

include space around the condition

x="Queen"
if [ $x == "King" ]; then
	echo "$x is King!"
else
	echo "$x is not a king!"
fi

x=10
if (($x>5)); then	
	echo "$x is more than 5!"
fi


-eq
-ne
-lt
-le
-gt
-ge

x=10

if [ $ -gt 5 ]; then
	echo "$x is more than 5!"
fi

-e if the file exists
-s if the file exists and has size greater than zero
-r if the file exists and is readable
-w if the file exists and is writable

&& for an
|| for or


x=10
if [ $x -gt 5 ] && [ $x -lt 11]; then	
	echo "$x is more than 5 and less than 11!"
fi

or

 
x=10
if [[ $x -gt 5 && $x -lt 11]]; then	
	echo "$x is more than 5 and less than 11!"
fi

>>>>>>>> move file based on accuracy in the file content
bash script.sh model_results/model_2.txt

# Extract Accuracy from first ARGV element
accuracy=$(grep Accuracy $1 | sed 's/.* //')

# Conditionally move into good_models folder
if [ $accuracy -ge 90 ]; then
    mv $1 good_models/
fi

# Conditionally move into bad_models folder
if [ $accuracy -lt 90 ]; then
    mv $1 bad_models/
fi

>>>>>> look in the file and move file if srvm or vpt is found

# Create variable from first ARGV element
sfile=$1

# Create an IF statement on sfile's contents
if grep -q 'SRVM_' $sfile && grep -q 'vpt' $sfile; then
	# Move file if matched
	mv $sfile good_logs/
fi

srvm and vpt must be in the file as a condition to be moved
>>>>>>> for loops & while statements

for x in 1 2 3
do
  echo $x
done

grep commands

https://se.ifmo.ru/~ad/Documentation/Shells_by_Example/ch04lev1sec1.html

brace expansion
{START..STOP..INCREMENT}

for x in {1..5..2}
do
	echo $x
done


for ((x=2; x<=4;x+=2))
do	
	echo $x
done


for file in ./*
do
	echo $file
done


x=1
while [ $x -le 3 ];
do	
	echo $x
	((x+=1))
done

beware of infinite loop

>>>>>>>


# Use a FOR loop on files in directory
for file in inherited_folder/*.R
do  
    # Echo out each file
    echo $file
done

cat "$emp_num-dailySales.txt"|egrep'Sales_total'|sed 's/.* ://' > "$emp_num-agg.txt"


>>>>>> look for RandomForestClassifier in the file

# Create a FOR statement on files in directory
for file in robs_files/*.py
do  
    # Create IF statement using grep
    if grep -q 'RandomForestClassifier' $file ; then
        # Move wanted files to to_keep/ folder
        mv $file to_keep/
    fi
done


.>>>>>>> case statements

case 'STRINGVAR' in
PATTERN1)
COMMAND1;;
PATTERN2)
COMMAND2;;
*)
DEFAULT COMMAND;;
esac


case $(cat $1) in
	*sydney*)
	mv $1 syndey /;;
	*melbourne*|*brisbane*)
	rm $1 ;;
	*canberra*)
	mv $1 "IMPORTANT_$1" ;;
	*)
	echo "No cities found";;
esac


>>>>>>


# Create a CASE statement matching the first ARGV element
case $1 in
  # Match on all weekdays
  Monday|Tuesday|Wednesday|Thursday|Friday)
  echo "It is a Weekday!" $1;;
  # Match on all weekend days
  Saturday|Sunday)
  echo "It is a Weekend!" $1;;
  # Create a default
  *) 
  echo "Not a day!" $1;;
esac

# Use a FOR loop for each file in 'model_out/'
for file in model_out/*
do
    # Create a CASE statement for each file's contents
    case $(cat $file) in
      # Match on tree and non-tree models
      *"Random Forest"*|*GBM*|*XGBoost*)
      mv $file tree_models/ ;;
      *KNN*|*Logistic*)
      rm $file ;;
      # Create a default
      *) 
      echo "Unknown model in $file" ;;
    esac
done

>>>>>> basic functions in bash scripts

1. functions are reusable
2. functions allow neat, compartmentalized (modular) code

function_name() {
 #function code
 return #something
}

or

function function_name{
#function code
return #something
}


function print_hello() {
    echo "Hello world!"
}
print_hello


temp_f=133
function convert_temp(){
	temp_c=$(echo "scale=2; ($temp_f -32)*5 / 9" | bc)
	printf "%.2f\n" $temp_c
}


>>>>>> arguments, return values and scope

similiar to argv

$@ and $* give all the arguments
$# gives the length of arguments

function print_filename{
 echo "The first file was $1"
	for file in $@
	do
		echo "this files has name $file"
	done
}

print_filename "lotr.txt" "mod.txt" "a.py"

scope refers to how accessible the variable is to the program

local scope is accessible in a certain part of the program

all variables are global by default

to restrict scope use the local command

function print_filename{
	local first_filename=$1
}

the return option in Bash is only meant to determine if the fucntion was successful(0) or failure (1-255).  It is captured in the global variable $?

function convert_temp{
    echo $(echo "scale=2; ($1-32) * 5/9" | bc)
}

converted=$(converted_temp 30)
echo "30F in celsius is $converted C"

>>>>>


# Create a function 
function return_percentage () {

  # Calculate the percentage using bc
  percent=$(echo "scale=2; 100 * 5 /9" | bc)

  # Return the calculated percentage
  echo $percent
}

# Call the function with 456 and 632 and echo the result
return_test=$(return_percentage 632)
echo "456 out of 632 as a percent is $return_test%"


>>>>>


# Create a function 
function return_percentage () {

  # Calculate the percentage using bc
  percent=$(echo "scale=2; 100 * $1 / $2" | bc)

  # Return the calculated percentage
  echo $percent
}

# Call the function with 456 and 632 and echo the result
return_test=$(return_percentage 456 632)
echo "456 out of 632 as a percent is $return_test%"

>>>

# Create a function
function get_number_wins () {

  # Filter aggregate results by argument
  win_stats=$(cat soccer_scores.csv | cut -d "," -f2 | egrep -v 'Winner'| sort | uniq -c | egrep "$1")

}

# Call the function with specified argument
get_number_wins "Etar"

# Print out the global variable
echo "The aggregated stats are: $win_stats"


>>>>>

# Create a function with a local base variable
function sum_array () {
  local sum=0
  # Loop through, adding to base variable
  for number in "$@"
  do
    sum=$(echo "$sum + $number" | bc)
  done
  # Echo back the result
  echo $sum
  }
# Call function with array
test_array=(14 12 23.5 16 19.34)
total=$(sum_array "${test_array[@]}")
echo "The total sum of the test array is $total"


>>>>>>> scheduling scripts with cron

1. regular tasks that need to be done. perhaps daily, weekly, multiple times per day

2. driven by crontab. crontab tells cron what code to run and when

crontab

minute
hour
day of month
month
day of week

file name

you can use commas for multiple intervals 15,30,45

slash for every x increment */15

30 1 * * * extract_data.sh

/etc/crontab

crontab -l (list)
crontab -e (edit)
crontab -r (remove all jobs)

# Create a schedule for 30 minutes past 2am every day
30 2 * * * bash script1.sh

# Create a schedule for every 15, 30 and 45 minutes past the hour
15,30,45 * * * bash script2.sh

# Create a schedule for 11.30pm on Sunday evening, every week
30 23 * * 0 bash script3.sh









































