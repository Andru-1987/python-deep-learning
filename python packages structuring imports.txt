
mysklearn
-- __init__.py
|-- preprocessing
|   |-- init__.py
|   |-- normalize.py
|   |-- standardize.py
|-- regression
|   |-- __init__.py
|   |-- regression.py
|-- utils.py

in mysklearn/__init__.py


>>>> import package

from mysklearn import preprocessing or from . import preprocessing
from mysklearn import regression

>>>> importing modules

from mysklearn.preprocessing import normalize or from . import normalize


>>>>> absolute import the useful function

from mysklearn.preprocessing.normalize import \ normalized_data


>>>>>>>  bringing certain functions into a module

in normalized.py

from mysklearn.preprocessing.funcs import (mymax,mymin) or from .funcs import mymax, mymin


>>>>>> importing between modules far apart

a custom exception MyException is in utils.py

use
from mysklearn.utils import MyException or from ..utils import MyException

.. means the parent of the parent directory
. means the parent directory


>>>>>>>

"""User-facing functions."""
from core import (
    inches_to_feet,
    inches_to_years,
    Units
)


def convert_unit(x, from_unit, to_unit):
    """Convert from one length unit to another.

    Parameters
    ----------
    x : array_like
        Lengths to convert.
    from_unit : {'in', 'ft', 'yd'}
        Unit of the input lengths `x`
    to_unit : {'in', 'ft', 'yd'}
        Unit of the returned lengths

    Returns
    -------
    ndarray
        An array of converted lengths with the same shape as `x`. If `x` is a
        0-d array, then a scalar is returned.
    """
    # Convert length to inches
    if from_unit == "in":
        inches = x
    elif from_unit == "ft":
        inches = inches_to_feet(x, reverse=True)
    elif from_unit == "yd":
        inches = inches_to_yards(x, reverse=True)

    # Convert inches to desired units
    if to_unit == "in":
        value = inches
    elif to_unit == "ft":
        value = inches_to_feet(inches)
    elif to_unit == "yd":
        value = inches_to_yards(inches)

    return value


>>>>> api

"""User-facing functions."""
from core import (
    inches_to_feet,
    inches_to_years,
    Units
)


def convert_unit(x, from_unit, to_unit):
    """Convert from one length unit to another.

    Parameters
    ----------
    x : array_like
        Lengths to convert.
    from_unit : {'in', 'ft', 'yd'}
        Unit of the input lengths `x`
    to_unit : {'in', 'ft', 'yd'}
        Unit of the returned lengths

    Returns
    -------
    ndarray
        An array of converted lengths with the same shape as `x`. If `x` is a
        0-d array, then a scalar is returned.
    """
    # Convert length to inches
    if from_unit == "in":
        inches = x
    elif from_unit == "ft":
        inches = inches_to_feet(x, reverse=True)
    elif from_unit == "yd":
        inches = inches_to_yards(x, reverse=True)

    # Convert inches to desired units
    if to_unit == "in":
        value = inches
    elif to_unit == "ft":
        value = inches_to_feet(inches)
    elif to_unit == "yd":
        value = inches_to_yards(inches)

    return value


>>>> example

  from api import convert_unit

  result = convert_unit(10, 'in', 'yd')
  print(result)













