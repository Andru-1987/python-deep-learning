the art and disciple of testing

imagine your working on this function

def get_ends(x)
	"""Get the first and last element in a list"""
   	return x[0], x[-1]


def test_get_ends():
	assert get_ends([1,1,5,39,0])==(1,0)

test_get_ends()

output: (1,0)

Good packages brag about how many tests they have

get packages have tests

keep your tests in the tests directory

mysklearn/
|-- tests

follow the directory structure of the code directory

mysklearn/tests/
|-- __init__.py
|-- preprocessing
| |-- __init__.py
| |-- test_normalize.py
| -- regression
| |-- __init__.py
| |-- test_regression.py


vs

mysklearn/mysklearn/
|-- __init__.py
|-- preprocessing
| |-- __init__.py
| |-- normalize.py
| -- regression
| |-- __init__.py
| |-- regression.py



from mysklearn.preprocessing.normalize import(find_max,find_min, normalized_data)

datacamp: Unit testing for data science


pytest
1. it looks for modules like test_modulename.py
2. it looks for functions like test_functionname()

if a test fails pytest will highlight the test with AssertionError

touch filename.py

rom impyrial.length.core import inches_to_feet, inches_to_yards

package.mysubpackage.module import myfunction1, myfunction2


>>>>>> test_core.py


from impyrial.length.core import inches_to_feet, inches_to_yards

# Define tests for inches_to_feet function
def test_inches_to_feet():
	# Check that 12 inches is converted to 1.0 foot
    assert inches_to_feet(12) == 1.0 
    # Check that 2.5 feet is converted to 30.0 inches
    assert inches_to_feet(2.5, reverse=True) == 30













