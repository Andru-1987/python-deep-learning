downloading data using curl

curl is short for Client for URLs

man curl

https://curl.haxx.se/download.html

curl [option flags] [URL]

supports: http, https, ftp, sftp

curl -O https://websitename.com/datafilename.txt

to upload the file

curl -o renamedatafilename.txt https://websitename.com/datafilename.txt


downloading multiple files using wildcards

curl -O https://websitename.com/datafilename*.txt

downloads every file on the server that starts with datafilename and ends with .txt

curl -O https://websitename.com/datafilename[001-100].txt

download every 10th file

curl -O https://websitename.com/datafilename[001-100:10].txt 


>>>>>
to download the file

curl -L https://assets.datacamp.com/production/repositories/4180/datasets/eb1d6a36fa3039e4e00064797e1a1600d267b135/201812SpotifyData.zip


# Download and rename the file in the same step
curl -o Spotify201812.zip -L https://assets.datacamp.com/production/repositories/4180/datasets/eb1d6a36fa3039e4e00064797e1a1600d267b135/201812SpotifyData.zip

>>>>


# Download all 100 data files
curl -O https://s3.amazonaws.com/assets.datacamp.com/production/repositories/4180/datasets/files/datafile[001-100].txt

# Print all downloaded files to directory
ls datafile*.txt


>>>>>>>>> using wget

world wide web get

used to download data from https and ftp

better at downloading multiple files recursively

installation
wget source code: https://www.gnu.org/software/wget

brew install wget

windows: download via gnuwin32

wget [option flags] [url]

wget supports: http,https, ftp, sftp

-b allows your download to run in the background

-q turn off the wget output

-c resume broken download

wget -bqc https://websitename.com/datafilename.txt


>>>>>>


# Fill in the two option flags 
wget -c -b https://assets.datacamp.com/production/repositories/4180/datasets/eb1d6a36fa3039e4e00064797e1a1600d267b135/201812SpotifyData.zip

# Verify that the Spotify file has been downloaded
ls 

# Preview the log file 
cat wget-log


>>>>>>> advanced downloading using wget

cat url_list.txt

wget -i url_list.txt

download from a list in a text file

setting download constraints for large files

set upper bandwidth limit (by default in bytes per second) with --limit-rate

wget --limit-rate=200k -i url_list.txt

setting download constraints for small files
1. set a mandatory pause time (in seconds) between file downloads with --wait

wget --wait=2.5 -i url_list.txt

>>>>>>


# View url_list.txt to verify content
cat url_list.txt

# Create a mandatory 1 second pause between downloading all files in url_list.txt
wget --wait=1 -i url_list.txt

# Take a look at all files downloaded
ls


>>>>>

# Use curl, download and rename a single file from URL
curl -o Spotify201812.zip -r https://assets.datacamp.com/production/repositories/4180/datasets/eb1d6a36fa3039e4e00064797e1a1600d267b135/201812SpotifyData.zip

# Unzip, delete, then re-name to Spotify201812.csv
unzip Spotify201812.zip && rm Spotify201812.zip
mv 201812SpotifyData.csv Spotify201812.csv

# View url_list.txt to verify content
cat url_list.txt

# Use Wget, limit the download rate to 2500 KB/s, download all files in url_list.txt
wget --limit-rate=200k -i url_list.txt

# Take a look at all files downloaded
ls


>>>>>>> csvkit

command line tools

in2csv: converts files to csv


in2csv SpotifyData.xlsx > SpotifyData.csv

1. use --names or -n option to print all sheet names

2. use --sheet option followed by the sheet name


# Check to confirm name and location of the Excel data file
ls

# Convert sheet "Worksheet1_Popularity" to CSV
in2csv SpotifyData.xlsx --sheet "Worksheet1_Popularity" > Spotify_Popularity.csv


# Print high level summary statistics for each column
csvstat Spotify_Popularity.csv  

>>>>>>>


# Check to confirm name and location of the Excel data file
ls

# Convert sheet "Worksheet2_MusicAttributes" to CSV
in2csv SpotifyData.xlsx --sheet "Worksheet2_MusicAttributes" > Spotify_MusicAttributes.csv


# Check to confirm name and location of the new CSV file
ls

# Print preview of Spotify_MusicAttributes
csvlook Spotify_MusicAttributes.csv



>>>>>>>>> filtering data using csvkit


filter the data by column or by row

csvcut: filters data using column name or position

csvgrep: to filter by row

csvcut -h #for documentation

csvcut -n Spotify_MusicAttributes.csv
1. track_id
2. danceability
3. duration_ms


csvcut -c 2,3 Spotify_MusicAttributes.csv
or
csvcut -c "dancability","duration_ms" Spotify_MusicAttributes.csv

csvcut will extract the 2 and 3 columns

csvgrep
1. filters by row using exact match or regex fuzzy matching
2. -m : followed by the exact row value to filter
3. -r : followed with a regex pattern
4. -f : followed by the path to a file

csvgrep -c "track_id" -m 5rcp91348908-1234 Spotify_Popularity.csv

>>>>>>

# Check to confirm name and location of data file
ls

# Print a list of column headers in data file 
csvcut -n Spotify_MusicAttributes.csv

  1: track_id
  2: danceability
  3: duration_ms
  4: instrumentalness
  5: loudness
  6: tempo
  7: time_signature


# Print a list of column headers in the data 
csvcut -n Spotify_MusicAttributes.csv

# Print the first column, by position
csvcut -c 1 Spotify_MusicAttributes.csv

# Print a list of column headers in the data 
csvcut -n Spotify_MusicAttributes.csv

# Print the first, third, and fifth column, by position
csvcut -c 1,3,5 Spotify_MusicAttributes.csv

# Print a list of column headers in the data 
csvcut -n Spotify_MusicAttributes.csv

# Print the first column, by name
csvcut -c "track_id" Spotify_MusicAttributes.csv

# Print a list of column headers in the data 
csvcut -n Spotify_MusicAttributes.csv

# Print the track id, song duration, and loudness, by name 
csvcut -c "track_id","duration_ms","loudness" Spotify_MusicAttributes.csv

>>>>>csvgrep

# Print a list of column headers in the data 
csvcut -n Spotify_MusicAttributes.csv

# Filter for row(s) where track_id = 118GQ70Sp6pMqn6w1oKuki
csvgrep -c "track_id" -m 118GQ70Sp6pMqn6w1oKuki Spotify_MusicAttributes.csv

# Print a list of column headers in the data 
csvcut -n Spotify_MusicAttributes.csv

# Filter for row(s) where danceability = 0.812
csvgrep -c "danceability" -m 0.812 Spotify_MusicAttributes.csv


>>>>>> stacking data and chaining commands

csvstack: stacks up the rows from two or more csv files

csvstack -h

csvlook Spotify_Rank6.csv
csvlook Spotify_Rank7.csv

check if both files have the same schema

csvstack Spotify_Rank6.csv Spotify_Rank7.csv > Spotify_AllRanks.csv

####tracking the source
csvstack -g "Rank6", "Rank7"
Spotify_Rank6.csv Spotify_Rank7.csv > Spotify_AllRanks.csv

csvlook Spotify_AllRanks.csv

1. a new column called group is added

csvstack -g "Rank6", "Rank7" -n "source" \
Spotify_Rank6.csv Spotify_Rank7.csv > Spotify_AllRanks.csv

1. rename the column from group to source


>>>>>>>>>>>> chaining command-line commands

; links commands together and runs sequentially

csvlook SpotifyData_All.csv; csvstat SpotifyData_All.csv;

&& links commands together, but only runs the 2nd command if the 1st command succeeds

csvlook SpotifyData_All.csv && csvstat SpotifyData_All.csv;

| uses the output of the 1st command as input to the 2nd command

csvcut -c "track_id", "danceability" Spotify_Popularity.csv | csvlook


>>>>>>

# Stack the two files and save results as a new file
csvstack SpotifyData_PopularityRank6.csv SpotifyData_PopularityRank7.csv > SpotifyPopularity.csv

# Preview the newly created file 
csvlook SpotifyPopularity.csv

>>>>>

# If csvlook succeeds, then run csvstat 
csvlook Spotify_Popularity.csv ; csvstat Spotify_Popularity.csv

>>>>>>

csvsort -c 2 Spotify_Popularity.csv | csvlook

>>>>>>

# Take top 15 rows from sorted output and save to new file
csvsort -c 2 Spotify_Popularity.csv | head -n 15 > Spotify_Popularity_Top15.csv

# Preview the new file 
csvlook Spotify_Popularity_Top15.csv


>>>>>>>

# Convert the Spotify201809 sheet into its own csv file 
in2csv Spotify_201809_201810.xlsx --sheet "Spotify201809","Spotify201810"  > Spotify201809.csv

# Check to confirm name and location of data file
ls


>>>>>>>

# Convert the Spotify201809 tab into its own csv file 
in2csv Spotify_201809_201810.xlsx --sheet "Spotify201809" > Spotify201809.csv

# Check to confirm name and location of data file
ls

# Preview file preview using a csvkit function
csvlook Spotify201809.csv | head -n 15

# Create a new csv with 2 columns: track_id and popularity
csvcut -c "track_id","popularity" Spotify201809.csv > Spotify201809_subset.csv

# While stacking the 2 files, create a data source column
csvstack -g "Sep2018","Oct2018"
 Spotify201809_subset.csv Spotify201810_subset.csv > Spotify_all_rankings.csv



























