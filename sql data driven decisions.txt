MovieNow
1. platform to stream movies
2. additional information for each movie: genre, main actor, etc
3. customer information
4. customers can rate the movie after watching


customers
1. customer_id, name, country, gender, date_of_birth, date_account_start

movies
1. movie_id, title, genre, runtime, year_of_releas, renting_price

renting
1. renting_id, customer_id, movie_id, rating (10 is the best rating)
, date_renting 

actors
1. actor_id, name, year_of_birth, nationality, gender

actsin
1. actsin_id, movie_id, actor_id

Objectives:
1. information for operational decisions
2. information for strategic decisions

Key Performance Indicators
1. Extract information from data which is relevant to measure the success of MovieNow

a. Total number of rentals: revenue
b. The average rating of all movies: customer satisification


>>>>>>>> Filtering and ordering

select * from customers where date_account_start between '2018-01-01' and '2018-09-31'

select * from actors where nationality in('USA','Australia')

select  * from renting where rating is null


>>>>>>>

SELECT *
FROM renting
WHERE date_renting BETWEEN '2018-04-01' AND '2018-08-31'
order by date_renting desc; -- Order by recency in decreasing order

SELECT *
FROM movies
where title in ('Showtime', 'Love Actually','The Fighter')
order by renting_price desc
; -- All genres except drama



>>>>> Aggregation and summerization

decisions are made by looking at summeries of certain groups

select avg(renting_price) from movies

select count(*) from actors

select count(name) from actors (returns the number of not null values in the column)

>>> aggregation
avg and sum the null values are ignored


select count(distinct country) from customers

select distinct rating from renting order by rating  (includes null in the output)


>>>>>> Grouping movies

preferences of customes by country or gender

average renting price by genre

select genre,
avg(renting_price) as avg_price,
count(*) as number_movies
from movies_selected
group by genre
having count(*)>2

>>>>>>>>>>>

SELECT country, -- For each country report the earliest date when an account was created
	min(date_account_start) AS first_account
FROM customers
GROUP BY country
ORDER BY first_account;

>>>>>>>>>>>

SELECT movie_id, 
       AVG(rating) AS avg_rating, -- Use as alias avg_rating
       count(rating) number_rating,                -- Add column for number of ratings with alias number_rating
       count(renting_id) number_renting                 -- Add column for number of movie rentals with alias number_renting
FROM renting
GROUP BY movie_id
order by number_renting desc;


>>>>>>>


SELECT customer_id,  -- Report the customer_id
       AVG(rating), -- Report the average rating per customer
       COUNT(rating), -- Report the number of ratings per customer
       COUNT(*) -- Report the number of movie rentals per customer
FROM renting
GROUP BY customer_id
HAVING COUNT(*) > 7 -- Select only customers with more than 7 movie rentals
ORDER BY AVG(rating); -- Order by the average rating in ascending order


>>>>>>> joining tables

left join : keep all rows of the left table, match with rows in the right table

select * 
from renting_selected as r
left join customer_selected as c
	on r.customer_id=c.customer_id


>>>>>>>
select * 
from renting as r
left join movies as m
	on r.movie_id = m.movie_id
left join customers as c
	on r.customer_id=c.customer_id

>>>>>>>

SELECT * -- Join renting with customers
FROM renting
LEFT JOIN customers
ON renting.customer_id=customers.customer_id;


>>>>>>>>

SELECT *
FROM renting AS r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
where c.country='Belgium'; -- Select only records from customers coming from Belgium

>>>>>>>>

SELECT avg(rating) -- Average ratings of customers from Belgium
FROM renting AS r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
WHERE c.country='Belgium';

>>>>>>>>

SELECT *
FROM renting AS r
join movies AS m -- Choose the correct join statment
ON r.movie_id=m.movie_id;


>>>>>>>>>

SELECT 
	sum(m.renting_price), -- Get the revenue from movie rentals
	count(renting_id), -- Count the number of rentals
	count(customer_id)  -- Count the number of customers
FROM renting AS r
LEFT JOIN movies AS m
ON r.movie_id = m.movie_id;

>>>>>>>>>>


SELECT 
	sum(m.renting_price), -- Get the revenue from movie rentals
	count(*), -- Count the number of rentals
	count(distinct r.customer_id)  -- Count the number of customers
FROM renting AS r
LEFT JOIN movies AS m
ON r.movie_id = m.movie_id;

>>>>>>>>>>


SELECT 
	SUM(m.renting_price), 
	COUNT(*), 
	COUNT(DISTINCT r.customer_id)
FROM renting AS r
LEFT JOIN movies AS m
ON r.movie_id = m.movie_id
-- Only look at movie rentals in 2018
WHERE date_renting between '2018-01-01' and '2018-12-31' ;


>>>>>>>>>

SELECT title, -- Create a list of movie titles and actor names
       a.name
FROM actsin as ai
LEFT JOIN movies AS m
ON m.movie_id = ai.movie_id
LEFT JOIN actors AS a
ON a.actor_id = ai.actor_id;


>>>>>>>>>>>>>>>subqueries


select
af.nationality,
min(af.year_of_birth),
max(af.year_of_birth)
from
(
select * 
from actors
where gender='female') as af
group by af.nationality;


How much money did each customer spend?

select
rm.customer_id,
sum(rm.renting_price)
from
(
select r.customer_id,
m.renting_price
from renting as r
left join movies as m
on r.movie_id=m.movie_id
) as rm
group by rm.customer_id



>>>>>>>>>

SELECT m.title, -- Create a list of movie titles and actor names
       a.name
FROM actsin ai
LEFT JOIN movies AS m
ON m.movie_id = ai.movie_id
LEFT JOIN actors AS a
ON a.actor_id = ai.actor_id;


SELECT m.title, -- Use a join to get the movie title and price for each movie rental
       m.renting_price
FROM renting AS r
LEFT JOIN movies AS m
ON r.movie_id=m.movie_id;


SELECT title, -- Report the income from movie rentals for each movie 
       sum(renting_price) AS income_movie
FROM
       (SELECT m.title,  
               m.renting_price
       FROM renting AS r
       LEFT JOIN movies AS m
       ON r.movie_id=m.movie_id) AS rm
group by title
ORDER BY title; -- Order the result by decreasing income


select sum(renting_price) income from movies m 
join renting r 
on m.movie_id=r.movie_id
where m.title='Django Unchained'


SELECT 
Gender,
sum(case when gender='female' then 1 else 0 end) Female, -- Report for male and female actors from the USA 
sum(case when gender='male' then 1 else 0 end) Male,
max(year_of_birth),
min(year_of_birth)
FROM
   (
   select * from actors a
   where nationality='USA'
   )a -- Use a subsequen SELECT to get all information about actors from the USA
GROUP BY Gender;

>>>>>>>>

customers, actsin, actors

who is the favorite actors for certain customer group?
a. Actor being watched most often
b. best average rating when being watched


SELECT 
a.name,
count(*) as number_views,
avg(r.rating) as avg_rating
FROM renting as r
left join customers as c
on r.customer_id=c.customer_id
left join actsin as ai
LEFT JOIN movies AS m
ON r.movie_id = ai.movie_id
LEFT JOIN actors AS a
ON a.actor_id = ai.actor_id

where c.gender='male'
group by a.name
having avg(r.rating) is not null
order by avg_rating desc, number_views desc


>>>>>>>>>


SELECT *
FROM renting AS r
LEFT JOIN customers c   -- Add customer information
on r.customer_id=c.customer_id
LEFT JOIN movies m   -- Add movie information
on m.movie_id=r.movie_id;


SELECT *
FROM renting AS r
LEFT JOIN customers AS c
ON c.customer_id = r.customer_id
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
where c.date_of_birth between '1970-01-01' and '1979-12-31'; -- Select customers born in the 70s


SELECT m.title, 
count(renting_id) number_of_views, -- Report number of views per movie
avg(rating) avg_rating -- Report the average rating per movie
FROM renting AS r
LEFT JOIN customers AS c
ON c.customer_id = r.customer_id
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE c.date_of_birth BETWEEN '1970-01-01' AND '1979-12-31'
group by m.title
order by number_of_views desc
;


<<<<<

SELECT m.title, 
COUNT(*),
AVG(r.rating)
FROM renting AS r
LEFT JOIN customers AS c
ON c.customer_id = r.customer_id
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE c.date_of_birth BETWEEN '1970-01-01' AND '1979-12-31'
GROUP BY m.title
having count(renting_id)>1 -- Remove movies with only one rental
order by AVG(r.rating) desc; -- Order with highest rating first


<<<<<

SELECT *
FROM renting as r 
LEFT JOIN customers m  -- Augment table renting with information about customers 
on r.customer_id=m.customer_id
LEFT JOIN actsin ai  -- Augment the table renting with the table actsin
on r.movie_id=ai.movie_id
LEFT JOIN actors a  -- Augment table renting with information about actors
on a.actor_id=ai.actor_id;

>>>>>>>

SELECT a.name,  c.gender,
       COUNT(*) AS number_views, 
       AVG(r.rating) AS avg_rating
FROM renting as r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
LEFT JOIN actsin as ai
ON r.movie_id = ai.movie_id
LEFT JOIN actors as a
ON ai.actor_id = a.actor_id

GROUP BY a.name, c.gender -- For each actor, separately for male and female customers
HAVING AVG(r.rating) IS NOT NULL 
and count(*)>5 -- Report only actors with more than 5 movie rentals
ORDER BY avg_rating DESC, number_views DESC;


>>>>>>>


SELECT a.name,  c.gender,
       COUNT(*) AS number_views, 
       AVG(r.rating) AS avg_rating
FROM renting as r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
LEFT JOIN actsin as ai
ON r.movie_id = ai.movie_id
LEFT JOIN actors as a
ON ai.actor_id = a.actor_id
where c.country='Spain' -- Select only customers from Spain
GROUP BY a.name, c.gender
HAVING AVG(r.rating) IS NOT NULL 
  AND COUNT(*) > 5 
ORDER BY avg_rating DESC, number_views DESC;


>>>>>>>>


SELECT *
FROM renting r -- Augment the table renting with information about customers
LEFT JOIN customers c
on r.customer_id=c.customer_id
LEFT JOIN movies m -- Augment the table renting with information about movies
on r.movie_id=m.movie_id
where date_renting >='2019-01-01'; -- Select only records about rentals since the beginning of 2019

>>>>>>>>>


SELECT 
	c.country,                    -- For each country report
	count(renting_id) AS number_renting, -- The number of movie rentals
	avg(rating) AS average_rating, -- The average rating
	sum(m.renting_price) AS revenue         -- The revenue from movie rentals
FROM renting AS r
LEFT JOIN customers AS c
ON c.customer_id = r.customer_id
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE date_renting >= '2019-01-01'
group by c.country;


>>>>>>>>>>>>>>Nested Query

select block in where or having clauses
inner query returns single or multiple values


select distinct customer_id
from renting
where rating <=3


select name from customers where customer_id in (28,41,86,120);


or
select name from customers where customer_id in 
	(
		select distinct customer_id
		from renting
		where rating <=3
	)

>>>>>>>>>

select min(date_account_start)
from customers
where country='Austria';


>>>> get accounts that were created earilier than in austria

select country, min(date_account_start)
from customers
group by country
having min(date_account_start)
<
(select min(date_account_start)
from customers
where country='Austria');

>>>>>

select name
from actors
where actor_id in
(
	select actor_id
	from actsin
	where movie_id=
	(select movie_id
	from movies
	where title='Ray'))

>>>>>>>
SELECT movie_id -- Select movie IDs with more than 5 views
FROM renting
group by movie_id
having count(renting_id)>5

>>>>>>>>

SELECT *
FROM movies
where movie_id in  -- Select movie IDs from the inner query
	(SELECT movie_id
	FROM renting
	GROUP BY movie_id
	HAVING COUNT(*) > 5)

>>>>>>>>

SELECT *
FROM customers
where customer_id in            -- Select all customers with more than 10 movie rentals
	(SELECT customer_id
	FROM renting
	GROUP BY customer_id
	having count(*)>10);

>>>>>> get average rating

select avg(rating) -- Calculate the total average rating
from renting

>>>>>>>>

SELECT movie_id, -- Select movie IDs and calculate the average rating 
       avg(rating)
FROM renting
group by movie_id
having avg(rating)>           -- Of movies with rating above average
	(SELECT AVG(rating)
	FROM renting);


>>>>>>>

SELECT title -- Report the movie titles of all movies with average rating higher than the total average
FROM movies
WHERE movie_id in
	(SELECT movie_id
	 FROM renting
     GROUP BY movie_id
     HAVING AVG(rating) > 
		(SELECT AVG(rating)
		 FROM renting));


>>>>>>>> Correlated nested queries

condition in the where clause of the inner query

references some column of a table in the outer query

SELECT * FROM movies as m
where 5 <
(select count(*)
from renting as r
where r.movie_id=m.movie_id)


<<<>>>>

-- Count movie rentals of customer 45
select count(*)
from renting
where customer_id=45;

-- Select customers with less than 5 movie rentals
SELECT *
FROM customers as c
WHERE 5< 
	(SELECT count(*)
	FROM renting as r
	WHERE r.customer_id = c.customer_id);


SELECT 
c.name,
r.rating
FROM customers c
join renting r 
on c.customer_id=r.customer_id
WHERE 4< -- Select all customers with a minimum rating smaller than 4 
	(SELECT MIN(rating)
	FROM renting AS r
	WHERE r.customer_id = c.customer_id)
order by name, rating


SELECT *
FROM movies m
WHERE  5 < -- Select all movies with more than 5 ratings
	(SELECT COUNT(rating)
	FROM renting r
	WHERE r.movie_id=m.movie_id);


SELECT *
FROM movies AS m
WHERE 8 < -- Select all movies with an average rating higher than 8
	(SELECT avg(rating)
	FROM renting AS r
	WHERE r.movie_id = m.movie_id);


>>>>>>>> exists

1. special case of a correlated nested query
2. used to check if result of a correlated nested query is empty
3. it returns true or false
4. true = not empty -> row of the outer query is selected
5. false = empty


select *
from movies as m
where exists
(select * 
from renting as r
where rating is not null
and r.movie_id = m.movie_id)


>>>>> Movies with a least one rating

select * from renting as r
where rating is not null
and r.movie_id=11    -> empty table


select *
from movies as m
where exists
(select * 
from renting as r
where rating is not null
and r.movie_id=m.movie_id);

Not exists returns true if the table is empty


select *
from movies as m
where not exists
(select * 
from renting as r
where rating is not null
and r.movie_id=m.movie_id);

returns in movie_id with 11


>>>>>>>>>


-- Select all records of movie rentals from customer with ID 115
select * from renting
where customer_id=115;


SELECT *
FROM renting
WHERE rating is not null -- Exclude those with null ratings
AND customer_id = 115; ->empty table


SELECT *
FROM renting
WHERE rating is not null -- Exclude null ratings
and customer_id=1; -- Select all ratings from customer with ID 1


SELECT *
FROM customers c -- Select all customers with at least one rating
WHERE exists
	(SELECT *
	FROM renting AS r
	WHERE rating IS NOT NULL 
	AND r.customer_id = c.customer_id)
	;


SELECT a.name  -- Select the records of all actors who play in a Comedy
FROM actsin AS ai
join movies as m
on ai.movie_id=m.movie_id
join actors as a
on ai.actor_id=a.actor_id
WHERE m.genre = 'Comedy';

SELECT *
FROM actsin AS ai
LEFT JOIN movies AS m
ON m.movie_id = ai.movie_id
WHERE m.genre = 'Comedy'
and ai.actor_id=1; -- Select only the actor with ID 1

empty table


SELECT *
FROM actors a
WHERE exists
	(SELECT *
	 FROM actsin AS ai
	 LEFT JOIN movies AS m
	 ON m.movie_id = ai.movie_id
	 WHERE m.genre = 'Comedy'
	 AND ai.actor_id = a.actor_id);


SELECT Nationality
,count(actor_id) Number_Actors
 -- Report the nationality and the number of actors for each nationality
FROM actors AS a
WHERE EXISTS
	(SELECT ai.actor_id
	 FROM actsin AS ai
	 LEFT JOIN movies AS m
	 ON m.movie_id = ai.movie_id
	 WHERE m.genre = 'Comedy'
	 AND ai.actor_id = a.actor_id)
group by Nationality;


>>>>>>>>>>>>>>>>>Union and Intersection

union is all values in table 1 and table 2


select title,
genre,
renting_price
from movies
where renting_price > 2.8

union

select title,
genre,
renting_price
from movies
where genre = 'Action & Adventure'


intersect if the join between two tables

select title,
genre,
renting_price
from movies
where renting_price > 2.8

intersect

select title,
genre,
renting_price
from movies
where genre = 'Action & Adventure'


>>>>>>>>

SELECT name,  -- Report the name, nationality and the year of birth
       nationality, 
       year_of_birth
FROM actors
where not nationality in ('USA'); -- Of all actors who are not from the USA

SELECT name, 
       nationality, 
       year_of_birth
FROM actors
where year_of_birth>1990; -- Born after 1990

>>>> union

SELECT name, 
       nationality, 
       year_of_birth
FROM actors
WHERE nationality <> 'USA'
union -- Select all actors who are not from the USA and all actors who are born after 1990
SELECT name, 
       nationality, 
       year_of_birth
FROM actors
WHERE year_of_birth > 1990;

>>>>> intersect

SELECT name, 
       nationality, 
       year_of_birth
FROM actors
WHERE nationality <> 'USA'
intersect -- Select all actors who are not from the USA and who are also born after 1990
SELECT name, 
       nationality, 
       year_of_birth
FROM actors
WHERE year_of_birth > 1990;

SELECT movie_id -- Select the IDs of all dramas
FROM movies
where genre='Drama';

>>>>>>

SELECT movie_id -- Select the IDs of all movies with average rating higher than 9
FROM renting r
GROUP BY movie_id
having avg(rating)>9;


>>>>>>

SELECT movie_id
FROM movies
WHERE genre = 'Drama'
intersect  -- Select the IDs of all dramas with average rating higher than 9
SELECT movie_id
FROM renting
GROUP BY movie_id
HAVING AVG(rating)>9;


>>>>> subquery

SELECT *
FROM movies
where movie_id in -- Select all movies of genre drama with average rating higher than 9
   (SELECT movie_id
    FROM movies
    WHERE genre = 'Drama'
    INTERSECT
    SELECT movie_id
    FROM renting
    GROUP BY movie_id
    HAVING AVG(rating)>9);


>>>>>>>>>>>>>>>>OLAP cube operator

OLAP - on-line analytical processing

Aggregate data for a better overview
1. count number of renting for each customer
2. average rating of movies for each genre and each country

produce pivot table to present aggregation results

rentings_extended
1. renting_id
2. country
3. genre
4. rating


select country,
genre,
count(*)
from renting_extended
group by cube(country,genre)


>>>>>

select Job,count(distinct PRTH.Employee) EmployeeCount from Viewpoint.dbo.PRTH with (nolock) where Job is not null and PRCo not in (99) group by cube(Job)  order by EmployeeCount desc

>>>>>

select country,
genre,
count(*)
from renting_extended
group by cube (country, genre)

select country,
genre,
count(rating)
from renting_extended
group by cube (country, genre)


>>>>>>

SELECT gender, -- Extract information of a pivot table of gender and country for the number of customers
	   country,
	   count(*)
FROM customers
GROUP BY CUBE (gender,country)
ORDER BY country;

SELECT genre,
       year_of_release,
       count(*)
FROM movies m
group by cube(genre,year_of_release)
ORDER BY year_of_release;

>>>>>

-- Augment the records of movie rentals with information about movies and customers
SELECT *
FROM renting r
LEFT JOIN movies m
ON r.movie_id=m.movie_id
LEFT JOIN customers c
ON r.customer_id=c.customer_id;


>>>>> average rating per country

SELECT 
	country,
    avg(rating)
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
group by country;


SELECT 
	country, 
	genre, 
	AVG(r.rating) AS avg_rating -- Calculate the average rating 
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
group by cube(country,genre); -- For all aggregation levels of country and genre


>>>>>>>> Rollup

rollup is always used in combination with the group by statement

returns aggregation on different levels of detail

order of the column names is important in rollup


select country,
genre,
count(*)
from renting_extended
group by rollup (country,genre)

>>>>>>

-- Count the total number of customers, the number of customers for each country, and the number of female and male customers for each country
SELECT country,
       gender,
	   COUNT(*)
FROM customers
group by rollup (country, gender)
order by country, gender; -- Order the result by country and gender

>>>>>>>> left join between renting and movies and look for null records

-- Join the tables
SELECT r.*
FROM movies AS m
left join renting AS r
ON r.movie_id=m.movie_id
left join customers AS c
ON c.customer_id=r.customer_id;


>>>>>> aggregate for each country and genre

SELECT 
	c.country, -- Select country
	m.genre, -- Select genre
	avg(rating), -- Average ratings
	count(*)  -- Count number of movie rentals
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
GROUP BY rollup(c.country,m.genre) -- Aggregate for each country and each genre
ORDER BY c.country, m.genre;


>>>>>> olap operations grouping sets

group by grouping sets

select country,
genre,
count(*)
from rentings_extended
group by grouping sets ((country,genre),(country),(genre),())

the column names surrounded by parentheses represent different levels of aggregation

group by grouping sets returns a union of serveral group by queries

equivalent to a group by cube

select country,
genre,
count(*)
from rentings_extended
group by grouping sets(country,genre)

you can specify which grouping sets should be included in the aggregation union


>>>>>>


SELECT 
	nationality, -- Select nationality of the actors
    gender, -- Select gender of the actors
    count(*) -- Count the number of actors
FROM actors
GROUP BY GROUPING SETS ((nationality), (gender), ()); -- Use the correct GROUPING SETS operation

>>>>>>


SELECT 
	c.country, -- Select country, gender and rating
    c.gender,
    r.rating
FROM renting AS r
left join customers AS c -- Use the correct join
on r.customer_id=c.customer_id;


SELECT 
	c.country, 
    c.gender,
	avg(rating) -- Calculate average rating
FROM renting AS r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
group by country,gender -- Order and group by country and gender
ORDER BY country,gender;

>>>>>>>


SELECT 
	c.country, 
    c.gender,
	AVG(r.rating)
FROM renting AS r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
group by grouping sets((country,gender))
order by country
; -- Group by country and gender with GROUPING SETS

>>>>>>


SELECT 
	c.country, 
    c.gender,
	AVG(r.rating)
FROM renting AS r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
-- Report all info from a Pivot table for country and gender
GROUP BY GROUPING SETS ((country, gender), (country),(gender),());


>>>>>>> movies with at least 4 ratings


select * from renting as r
left join customers as c
on c.customer_id=r.customer_id
left join movies as m
on m.movie_id=r.movie_id
where r.movie_id in (
select movie_id
from renting
group by movie_id
having count(rating)>=4)
and r.date_renting >='2018-04-01'

aggregation
1. count the number of movie rentals
2. count the number of different movies
3. calculate the average rating

levels of aggregation
1. total aggregation
2. for movies by year of release
3. for movies by year of release depending on the country of the customers


select c.country,
	m.year_of_release,
	count(*) as n_rentals,
	count(distinct r.move_id) as n_movies,
	avg(rating) as avg_rating
from renting as r
left join customers as c
on c.customer_id=r.customer_id
left join movies as m
on m.movie_id=r.movie_id
where r.movie_id in
(
select movie_id
from renting
group by movie_id
having count(rating)>=4)
and r.date_renting >'2018-04-01'
group by rollup(m.year_of_release, c.country)
order by c.country, m.year_of_release


>>>>>>


SELECT *
FROM renting AS r
join movies as m -- Augment the table with information about movies
on r.movie_id=m.movie_id;


SELECT *
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE m.movie_id IN ( -- Select records of movies with at least 4 ratings
		select movie_id
	from renting
	group by movie_id
	having count(rating)>=4)
and r.date_renting >'2018-04-01'
; -- Select records of movie rentals since 2018-04-01


SELECT m.genre, -- For each genre, calculate:
	   avg(r.rating) avg_rating, -- The average rating and use the alias avg_rating
	   count(r.rating) n_rating, -- The number of ratings and use the alias n_rating
	   count(r.renting_id) n_rentals,     -- The number of movie rentals and use the alias n_rentals
	   count(distinct r.movie_id) n_movies -- The number of distinct movies and use the alias 
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE r.movie_id IN ( 
	SELECT movie_id
	FROM renting
	GROUP BY movie_id
	HAVING COUNT(rating) >= 3)
AND r.date_renting >= '2018-01-01'
group by m.genre;

>>>>>>>>

SELECT genre,
	   AVG(rating) AS avg_rating,
	   COUNT(rating) AS n_rating,
       COUNT(*) AS n_rentals,     
	   COUNT(DISTINCT m.movie_id) AS n_movies 
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE r.movie_id IN ( 
	SELECT movie_id
	FROM renting
	GROUP BY movie_id
	HAVING COUNT(rating) >= 3 )
AND r.date_renting >= '2018-01-01'
GROUP BY genre
order by avg_rating desc; -- Order the table by decreasing average rating


>>>>>>>>


-- Join the tables
SELECT *
FROM renting AS r
LEFT JOIN actsin AS ai
on r.movie_id=ai.movie_id
LEFT JOIN actors AS a
on a.actor_id=ai.actor_id;

>>>>>>>  USA and British - British get better ratings but USA actors get more rentals

SELECT a.nationality,
       a.gender,
	   avg(r.rating)  AS avg_rating, -- The average rating
	   count(r.rating) AS n_rating, -- The number of ratings
	   count(r.renting_id) AS n_rentals, -- The number of movie rentals
	   count(distinct a.actor_id) AS n_actors -- The number of actors
FROM renting AS r
LEFT JOIN actsin AS ai
ON ai.movie_id = r.movie_id
LEFT JOIN actors AS a
ON ai.actor_id = a.actor_id
WHERE r.movie_id IN ( 
	SELECT movie_id
	FROM renting
	GROUP BY movie_id
	HAVING COUNT(rating) >=4 )
AND r.date_renting >= '2018-04-01'
GROUP BY Grouping Sets((nationality,gender)); -- Report results for each combination of the actors' nationality and gender









