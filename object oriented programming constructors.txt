class Employee:
	def __init__(self, name, salary):
		self.name=name
		self.salary=salary

emp1 = Employee("Teo Mille",50000)
emp2 = Employee("Marta Popov", 65000)

how to share data among all the instances of the class?

class attribute

class MyClass
	CLASS_ATTR_NAME = attr_value

serves as a global variable in the class

class Employee:
	MIN_SALARY=30000

	def __init__(self, name,salary):
		self.name=name


		if salary>=Employee.MIN_SALARY:
			self.salary=salary
		else
			self.salary=Employee.MIN_SALARY


	def my_awesome_method(cls, args)
		print(cls)

class methods can be called statically

Employee.my_awesome_method(cls, args)

why?
alternative constructors

an instantiated class can only have one constructor


	def from_file(cls, filename):
		with open(filename, "r") as f:
			name=f.readline()

		return cls(name)


emp = Employee.from_file("employee_data.txt")

type(emp)

creates the employee instance without calling the constructor


>>> sample >>> print the shared variable MAX_POSITION from the player class

# Create a Player class
class Player:
        MAX_POSITION=30
        def __init__(self):
            self.position=0


# Print Player.MAX_POSITION       
print(Player.MAX_POSITION)

# Create a player p and print its MAX_POSITITON
p=Player
print(p.MAX_POSITION)

>>>> sample appling an where clause using the shared variable

class Player:
    MAX_POSITION = 10
    
    def __init__(self):
        self.position = 0

    # Add a move() method with steps parameter
    def move(self,steps):
            if steps<Player.MAX_POSITION:
                self.position+=steps
            else:
                self.position=Player.MAX_POSITION
    

       
    # This method provides a rudimentary visualization in the console    
    def draw(self):
        drawing = "-" * self.position + "|" +"-"*(Player.MAX_POSITION - self.position)
        print(drawing)

p = Player(); p.draw()
p.move(4); p.draw()
p.move(5); p.draw()
p.move(3); p.draw()


>>>>>>> sample  assigning to a shared variable by instance and by class

# Create Players p1 and p2
p1=Player()
p2=Player()

print("MAX_SPEED of p1 and p2 before assignment:")
# Print p1.MAX_SPEED and p2.MAX_SPEED
print(p1.MAX_SPEED)
print(p2.MAX_SPEED)

# Assign 7 to p1.MAX_SPEED
p1.MAX_SPEED=7

print("MAX_SPEED of p1 and p2 after assignment:")
# Print p1.MAX_SPEED and p2.MAX_SPEED
print(p1.MAX_SPEED)
print(p2.MAX_SPEED)

print("MAX_SPEED of Player:")
# Print Player.MAX_SPEED
print(Player.MAX_SPEED)

output:

MAX_SPEED of p1 and p2 before assignment:
3
3
MAX_SPEED of p1 and p2 after assignment:
7
3
MAX_SPEED of Player:
3


You shouldn't be able to change the data in all the instances of the class through a single instance.

>>>> sample >>> using a decorator with a method

class BetterDate:    
    # Constructor
    def __init__(self, year, month, day):
      # Recall that Python allows multiple variable assignments in one line
      self.year, self.month, self.day = year, month, day
    
    # Define a class method from_str
    @classmethod
    def from_str(cls, datestr):
        # Split the string at "-" and convert each part to integer
        parts = datestr.split("-")
        year, month, day = int(parts[0]), int(parts[1]), int(parts[2])
        # Return the class instance
        return BetterDate(year,month,day)
        
bd = BetterDate.from_str('2020-04-30')   
print(bd.year)
print(bd.month)
print(bd.day)

>>>>>> sample return a class using a from_datetime method call of a class

# import datetime from datetime
from datetime import datetime

class BetterDate:
    def __init__(self, year, month, day):
      self.year, self.month, self.day = year, month, day
      
    @classmethod
    def from_str(cls, datestr):
        year, month, day = map(int, datestr.split("-"))
        return cls(year, month, day)
      
    # Define a class method from_datetime accepting a datetime object
    def from_datetime(datetime):
      return BetterDate(datetime.year,datetime.month, datetime.day)

# You should be able to run the code below with no errors: 
today = datetime.today()     
bd = BetterDate.from_datetime(today)   
print(bd.year)
print(bd.month)
print(bd.day)


>>>>>>>>>>>>>>>>>Class inheritance

some one may have solved the problem

1. modules are great for fixed functionality

BankAccount
a. balance
b. interest

SavingAccount
1. withdraw()
2. compute_interest()

CheckingAccount
a. balance
b. limit
1. withdraw()
2. deposit()

class BankAccount:
	def __init__(self, balance):
		self.balance=balance
	def withdraw(self,amount):
		self.balance-=amount

class SavingsAccount(BankAccount):
	pass

BankAccount functionality is being extended or inherited

SavingsAccount will inherit the functionality and add more of its own functionality

savings_account = SavingsAccount(1000)
type(savings_acct)

savings_acct.balance

savings_acct.withdraw(300)

savingAccount is a BankAccount

isinstance(savings_acct, SavingsAccount)

output: True

bank_acct=BankAccount(300)

isinstance(bank_acct,SavingsAccount)

output: False


>>> sample >>> inheritance

class Employee:
  MIN_SALARY = 30000    

  def __init__(self, name, salary=MIN_SALARY):
      self.name = name
      if salary >= Employee.MIN_SALARY:
        self.salary = salary
      else:
        self.salary = Employee.MIN_SALARY
        
  def give_raise(self, amount):
      self.salary += amount      
        
# Define a new class Manager inheriting from Employee
class Manager(Employee):
  pass

  def display(self):
      return("Manager "+self.name)

# Define a Manager object
mng = Manager("Debbie Lashko",86500)

# Print mng's name
print(mng.name)

# Call mng.display()
mng.display()

output:

Debbie Lashko
'Manager Debbie Lashko'

>>>>>>>>>>>>>Customizing functionality via inheritance

class SavingsAccount(BankAccount):

	def __init__(self, balance, interest_rate):

		BankAccount.__init(self, balance)
		self.interest_rate= interest_rate


	def compute_interest(self, n_periods=1):
		return self.balance *((1+self.interest_rate)**n_periods-1)


acct=SavingsAccount(1000,0.03)

acct.interest_rate

output: 0.03

Adding Functionality:
1. add methods as usual
2. use data from the parent and the child class

CheckingAccount
1. balance
2. limit

withdraw()
deposit()



class CheckingAccount(BankAccount):
	def __init__(self, balance, limit):
		BankAccount.__init__(self, content)
		self.limit=limit

	def deposit(self, amount):
		self.balance+=amount

	def withdraw(self,amount, fee=0):
		if fee<=self.limit:
			BankAccount.withdraw(self, amount-fee)
		else:
			BankAccount.withdraw(self, amount-self.limit)

>>>>> sample Employee and Manager

class Employee:
    def __init__(self, name, salary=30000):
        self.name = name
        self.salary = salary

    def give_raise(self, amount):
        self.salary += amount

        
class Manager(Employee):
    def display(self):
	print("Manager ", self.name)

  # Add a constructor
    def __init__(self, name, salarysalary=50000, project=None):

        # Call the parent's constructor   
        Employee.__init__(self, name, salary)

        # Assign project attribute
        self.project=project

  	# Add a give_raise method
	def give_raise(self, amount,bonus=1.05):
        new_amount=amount * bonus
        Employee.give_raise(self,new_amount)
    
    
mngr=Manager("Ashta Dunbar", 78500)
mngr.give_raise(1000)
print(mngr.salary)
mngr.give_raise(2000, bonus=1.03)
print(mngr.salary)


output:
78500
79550.0
81610.0

>>>>>>>>>>> sample >>>> racer

# Create a Racer class and set MAX_SPEED to 5
class Racer(Player):
    MAX_SPEED=5
# Create a Player and a Racer objects
p = Player()
r = Racer()

print("p.MAX_SPEED = ", p.MAX_SPEED)
print("r.MAX_SPEED = ", r.MAX_SPEED)

print("p.MAX_POSITION = ", p.MAX_POSITION)
print("r.MAX_POSITION = ", r.MAX_POSITION)

p.MAX_SPEED =  3
r.MAX_SPEED =  5
p.MAX_POSITION =  10
r.MAX_POSITION =  10


>>>>>> sample inheriting from pd.DataFrame and adding the attribute created_at

# Import pandas as pd
import pandas as pd

# Define LoggedDF inherited from pd.DataFrame and add the constructor
class LoggedDF(pd.DataFrame):
        def __init__(self,*args,**kwargs):
            pd.DataFrame.__init__(self,*args,**kwargs)
            self.created_at = datetime.today()

def to_csv(self, *args, **kwargs):
    # Copy self to a temporary DataFrame
    temp = self.copy()
    
    # Create a new column filled with self.created at
    temp["created_at"] = self.created_at
    
    # Call pd.DataFrame.to_csv on temp with *args and **kwargs
        pd.DataFrame.to_csv(temp, *args,**kwargs)


Using *args and **kwargs allows you to not worry about keeping the signature of your customized method compatible


>>>>>>>>>>>>>overloading comparison

class Customer:
	def __init__(self, id, name):
		self.id,self.name=id,name

	def __eq__(self, other):
		return(self.id==other.id and
			self.name==other.name)

eq == should return a boolean value

comparison operations

== __eq__()
!= __ne__()
>= __ge__()
<= __le__()
>  __gt__()
<  __lt__()

objects as dictionaries __hash__()

>>>>> sample  >>> override __eq__

class BankAccount:
   # MODIFY to initialize a number attribute
    def __init__(self, number, balance=0):
        self.number=number
        self.balance = balance
      
    def withdraw(self, amount):
        self.balance -= amount 
    
    # Define __eq__ that returns True if the number attributes are equal 
    def __eq__(self, other):
        return self.number == other.number

# Create accounts and compare them       
acct1 = BankAccount(123, 1000)
acct2 = BankAccount(123, 1000)
acct3 = BankAccount(456, 1000)
print(acct1 == acct2)
print(acct1 == acct3)


>>>> sample >>> override __eq__ and check type of the object

class BankAccount:
    def __init__(self, number, balance=0):
        self.number, self.balance = number, balance
      
    def withdraw(self, amount):
        self.balance -= amount 

    # MODIFY to add a check for the type()
    def __eq__(self, other):
        return ((self.number == other.number) \
            & (type(self) == type(other))
        )

acct = BankAccount(873555333)
pn = Phone(873555333)
print(acct == pn)


Python always calls the child's __eq__() method when comparing a child object to a parent
 

# Import pandas as pd
import pandas as pd

# Define LoggedDF inherited from pd.DataFrame and add the constructor
class LoggedDF(pd.DataFrame):
  
  def __init__(self, *args, **kwargs):
    pd.DataFrame.__init__(self, *args, **kwargs)
    self.created_at = datetime.today()
    
    
ldf = LoggedDF({"col1": [1,2], "col2": [3,4]})
print(ldf.values)
print(ldf.created_at)


<<<<<<<<<<<<<< overloading

class Customer:
	def __init__(self, name, balance):
		self.name,self.balance=name,balance

	def __str__(self):
	cust_str="""
		Customer:
			name:{name}
			balance:{balance}
			""".format(name=self.name, balance=self.balance)
	return cust_str

	def __repr__(self):
	return "Customer('{name}',{balance})".format(name=self.name,balance=self.balance)


cust=Customer("Maryam Azur",3000)

print(cust)

output: see an user friendly
>>>> getting a printable representation of an object

__str__()
__repr__()

print(obj), str(obj)

repr(obj)


>>>> sample >>> __str__

class Employee:
    def __init__(self, name, salary=30000):
        self.name, self.salary = name, salary
            
    # Add the __str__() method
    def __str__(self):
        s = "Employee name: {name}\nEmployee salary: {salary}".format(name=self.name, salary=self.salary)      
        return s

emp1 = Employee("Amar Howard", 30000)
print(emp1)
emp2 = Employee("Carolyn Ramirez", 35000)
print(emp2)

>>>> sample >>> __repr__

class Employee:
    def __init__(self, name, salary=30000):
        self.name, self.salary = name, salary
      

    def __str__(self):
        s = "Employee name: {name}\nEmployee salary: {salary}".format(name=self.name, salary=self.salary)      
        return s
      
    # Add the __repr__method  
    def __repr__(self):
        s = "Employee(\"{name}\", {salary})".format(name=self.name, salary=self.salary)      
        return s       

emp1 = Employee("Amar Howard", 30000)
print(repr(emp1))
emp2 = Employee("Carolyn Ramirez", 35000)
print(repr(emp2))


>>>>>>>>>>> sample >>>> exceptions


exceptions will stop the execution of the program.

try except finally


try:
 #try running some code
except ExceptionNameHere:
 #run this code if exceptionNamehere happens
except AnotherExceptionHere:
 #run this code if anotherexceptionhere happens

finally:
 #run this code no matter what


raising exceptions:

def make_list_of_ones(length):
	if length<=0:
		raise ValueError("Invalid length!")
	return[1]*length

make_list_of_ones(-1)


exceptions are classes

BaseException
	Exception
		ArithemticError
			FloatingPointError
			OverflowError
			ZeroDivisionError
		TypeError
		ValueError
			UnicodeError
				UnicodeDecodeError
			UnicodeEncodeError
			UnicodeTranslateError

		RuntimeError

	SystemExit



class BalanceError(Exception): pass


class Customer:
	def __init__(self,name, balance):
	if balance < 0:
		raise BalanceError("Balance has to be non-negative!")
	else:
	self.name, self.balance=name,balance

cust=Customer("Larry Torres",-100)


>>>>>> sample adding try except to a function

# MODIFY the function to catch exceptions
def invert_at_index(x, ind):
  try:
    return 1/x[ind]
  except ZeroDivisionError:
    print("Cannot divide by zero!")
  except IndexError:
    print("Index out of range!")
 
a = [5,6,0,7]

# Works okay
print(invert_at_index(a, 1))

# Potential ZeroDivisionError
print(invert_at_index(a, 2))

# Potential IndexError
print(invert_at_index(a, 5))


>>> sample  >>> inherit ValueError

class SalaryError(ValueError): pass
class BonusError(SalaryError): pass

class Employee:
  MIN_SALARY = 30000
  MAX_RAISE = 5000

  def __init__(self, name, salary = 30000):
    self.name = name
    
    # If salary is too low
    if  salary < Employee.MIN_SALARY:
      # Raise a SalaryError exception
      raise SalaryError("Salary is too low")
      
    self.salary = salary

emp=Employee("bob",100)  


>>>> sample >>> BonusError

class SalaryError(ValueError): pass
class BonusError(SalaryError): pass

class Employee:
  MIN_SALARY = 30000
  MAX_BONUS = 5000

  def __init__(self, name, salary = 30000):
    self.name = name    
    if salary < Employee.MIN_SALARY:
      raise SalaryError("Salary is too low!")      
    self.salary = salary
    
  # Rewrite using exceptions  
  def give_bonus(self, amount):
    if amount > Employee.MAX_BONUS:
      raise BonusError("The bonus amount is too high!")
        
    elif self.salary + amount <  Employee.MIN_SALARY:
       raise SalaryError("The salary after bonus is too low!")
      
    else:  
      self.salary += amount



t's better to list the except blocks in the increasing order of specificity, i.e. children before parents, otherwise the child exception will be called in the parent except block.


>>>>>>>>>>>>>>>Polymorphism

polymorphism: using an unified interface to operate on objects of different classes

def batch_withdraw(list_of_accounts, amount):
	for acct in list_of_accounts:
		acct.withdraw(amount)

b,c,s= BankAccount(1000), CheckingAccount(2000), SavingsAccount(3000)

batch_withdraw([b,c,s])

liskov substitution principle

base class should be interchangeable with any of its subclasses without altering any properties of the program


Wherever BankAccount works, CheckingAccount should work as well

syntactically
* function signatures are compatible arguments and returned values

semantically
* the state of the object and the program remains consistent
* subclass method doesn't strengthen input conditions
* subclass method doesn't weaken output conditions
* no additional exceptions

violation of lsp

BankAccount.withdraw() requires 1 parameter, but CheckingAccount.withdraw() requires 2

violation subclass strengthening input conditions

BankAccount.withdraw() accepts any amount, but CheckingAccount.withdraw() assumes that the amount is limited

violation subclass weakening output conditions

Bankaccount.withdraw() can only leave a positive balance or cause an error,

CheckingAccount.withdraw() can leave balance negative

violating lsp
1. changing additional attributes in subclass's method
2. throwing additional exceptions in subclasses method

if the inheritance violates the lsp principle, you should not be using inheritance

>>>>> sample

class Parent:
    def talk(self):
        print("Parent talking!")     

class Child(Parent):
    def talk(self):
        print("Child talking!")          

class TalkativeChild(Parent):
    def talk(self):
        print("TalkativeChild talking!")
        Parent.talk(self)


p, c, tc = Parent(), Child(), TalkativeChild()

for obj in (p, c, tc):
    obj.talk()


>>>>> sample rectangle and square

# Define a Rectangle class
class Rectangle():
    def __init__(self,h,w):
        self.h,self.w=h,w

# Define a Square class
class Square(Rectangle):
    def __init__(self,w):
        self.h,self.w=w,w

A Square inherited from a Rectangle will always have both the h and w attributes, but we can't allow them to change independently of each other.

>>>>> sample >> square violates the liskov principle

>> preserve consistent state

class Rectangle:
    def __init__(self, w,h):
      self.w, self.h = w,h

# Define set_h to set h      
    def set_h(self, h):
      self.h = h
      
# Define set_w to set w          
    def set_w(self, w):
      self.w=w
      
      
class Square(Rectangle):
    def __init__(self, w):
      self.w, self.h = w, w 

# Define set_h to set w and h
    def set_h(self, h):
      self.h = h
      self.w = h

# Define set_w to set w and h      
    def set_w(self,w):
      self.h = w
      self.w = w


Remember that the substitution principle requires the substitution to preserve the oversall state of the program. An example of a program that would fail when this substitution is made is a unit test for a setter functions in Rectangle class.

>>>>>> data access >>> private attributes

1. all class data is public
2. restricting access

use @property to customize access

override __getattr__() and __setattr__()

start with a sing _ > "internal"
not a part of the public api

if the variable starts with __ then it is private

name mangling obj.__attr_name is intrepreted as obj._MyClass__attr_name

Use to prevent name clashes in inherited classes

>>>> sample create an internal method called _is_valid

# MODIFY to add class attributes for max number of days and months
class BetterDate:
    _MAX_DAYS = 30
    _MAX_MONTHS = 12
    
    def __init__(self, year, month, day):
      self.year, self.month, self.day = year, month, day
      
    @classmethod
    def from_str(cls, datestr):
        year, month, day = map(int, datestr.split("-"))
        return cls(year, month, day)
    
    # Add _is_valid() checking day and month values
    def _is_valid(self):
        return (self.day <= BetterDate._MAX_DAYS) and \
               (self.month <= BetterDate._MAX_MONTHS)
         
bd1 = BetterDate(2020, 4, 30)
print(bd1._is_valid())

bd2 = BetterDate(2020, 6, 45)
print(bd2._is_valid())


The single underscore naming convention is purely a convention, and Python doesn't do anything special with such attributes and methods behind the scenes

 That convention is widely followed, though, so if you see an attribute name with one leading underscore in someone's class - don't use it


>>>>>>>>>Properties


df.shape

attribute can not be changed


class Employer:
	def __init__(self,name, new_salary):
		self._salary=new_salary


	@property
	def salary(self):
		return self._salary

	@salary.setter
	def salary(self,new_salary):
		if new_salary<0:
			raise ValueError("Invalid salary")
		self._salary=new_salary




emp.salary=60000

without a setter, the property will be read only

read only
@salary.getter (read only)

@salary.deleter


>>>>>> sample customer

# Create a Customer class
class Customer():
    def __init__(self,name,new_bal):
            self._name=name
          if new_bal<0:
                raise ValueError("Invalid new balance")
            else:
                self._new_bal=new_bal

    @property
    def balance(self):
        return self._balance

       @balance.setter
    def balance(self,balance):
        if balance<0:
            raise ValueError("Invalid new balance")
        else:
            self._balance=balance
            print("Setter method is called")

# Create a Customer        
cust = Customer("Belinda Lutz",2000)
# Assign 3000 to the balance property
cust.balance=3000

# Print the balance property
print(cust.balance)


>>>>>>> sample   read only property

import pandas as pd
from datetime import datetime

# MODIFY the class to turn created_at into a read-only property
class LoggedDF(pd.DataFrame):
    def __init__(self, *args, **kwargs):
        pd.DataFrame.__init__(self, *args, **kwargs)
        self._created_at = datetime.today()

    def to_csv(self, *args, **kwargs):
        temp = self.copy()
        temp["created_at"] = self.created_at
        pd.DataFrame.to_csv(temp, *args, **kwargs) 

    @property  
    def created_at(self):
        return self._created_at

ldf = LoggedDF({"col1": [1,2], "col2":[3,4]}) 

# Put into try-except block to catch AtributeError and print a message
try:
    ldf.created_at = '2035-07-13'
except AttributeError:
    print("Could not set attribute")




















		








		

	




		










 




