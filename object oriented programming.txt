think object oriented

start thinking of patterns of behavior

code as interactions of objects
code is more usable and maintainable

object= state+ behavior  (encapsulation)

classes are blueprints for objects outlining possible states and behaviors

in python everything is an object
every object has a class

type() to find the class


import numpy as np
a=np.array([1,2,3,4])
a.shape
a.reshape(2,2)

>>>Class

class Customer:
	pass #blank template

c1=Customer()

you can create instances of a template class


class Customer:

	def identify(self, name):
		print("I am a customer "+name)

cust = Customer()

cust.identify("Laura")

self is a stand-in for a particular object used in class definition

attributes customer name should be name
attributes are created by assignment


class Customer:

	def set_name(self, new_name):
		self.name=new_name

	def identify(self):
		print("I am Customer"+self.name)


self reference the object and name comes into existence by assignment

customer=Customer()
customer.set_name("Laura")
print(customer.name)


>>Sample

class Employee:
  
  def set_name(self, new_name):
    self.name = new_name
  
  # Add set_salary() method
  def set_salary(self,new_salary):
    self.salary=new_salary
  
  
# Create an object emp of class Employee  
emp = Employee()

# Use set_name to set the name of emp to 'Korel Rossi'
emp.set_name('Korel Rossi')

# Set the salary of emp to 50000
emp.set_salary(50000)

print(emp.name,emp.salary)


>>>Sample

class Employee:
    def set_name(self, new_name):
        self.name = new_name

    def set_salary(self, new_salary):
        self.salary = new_salary 

    # Add a give_raise() method with raise amount as a parameter
    def give_raise(self, new_raise):
        self.salary += new_raise


emp = Employee()
emp.set_name('Korel Rossi')
emp.set_salary(50000)

print(emp.salary)
emp.give_raise(1500)
print(emp.salary)

>>>Sample

class Employee:
    def set_name(self, new_name):
        self.name = new_name

    def set_salary(self, new_salary):
        self.salary = new_salary 

    def give_raise(self, amount):
        self.salary = self.salary + amount

    # Add monthly_salary method that returns 1/12th of salary attribute
    def monthly_salary(self):
        return self.salary/12

    
emp = Employee()
emp.set_name('Korel Rossi')
emp.set_salary(50000)

# Get monthly salary of emp and assign to mon_sal
mon_sal = emp.monthly_salary()

# Print mon_sal
print(mon_sal)


>>>init constructor

class Customer:
	def __init__(self, name, balance):
		self.name=name
		self.balance=balance
		print(" the constructor method was called

customer = Customer("Bob", 1000)
print(customer.name, customer.balance)

1. try defining attribute in the constructor
2. defining attributes in the constructor puts all the attributes in one place
3. work to create usable and maintainable code
4. name your classes using camelcase low case for functions and attributes
5. """Doc strings are comments in python"""

>>>Sample

class Employee:
    # Create __init__() method
    def __init__(self, name, salary=0):
        # Create the name and salary attributes
        self.name = name
        self.salary = salary
    
    # From the previous lesson
    def give_raise(self, amount):
        self.salary += amount

    def monthly_salary(self):
        return self.salary/12
        
emp = Employee("Korel Rossi")

>>>Sample

class Employee:
  
    def __init__(self, name, salary=0):
        self.name = name
        # Modify code below to check if salary is positive
        if salary>0:
            self.salary = salary 
        else:
            self.salary=0
   
   # ...Other methods omitted for brevity ...
      
emp = Employee("Korel Rossi", -1000)
print(emp.name)
print(emp.salary)

>>>Sample

# Import datetime from datetime
from datetime import datetime

class Employee:
    
    def __init__(self, name, salary=0):
        self.name = name
        if salary > 0:
          self.salary = salary
        else:
          self.salary = 0
          print("Invalid salary!")
          
        # Add the hire_date attribute and set it to today's date
        self.hire_date=datetime.today()
        
   # ...Other methods omitted for brevity ...
      
emp = Employee("Korel Rossi", -1000)
print(emp.name)
print(emp.salary)

>>>Sample

import numpy as np
class Point:
    def __init__(self,x=0.0,y=0.0):
        self.x=x
        self.y=y
        
    def reflect(self,axis):
        if axis=='x':
            self.y=self.y*-1
        elif axis=='y':
            self.x=self.x*-1

    def distance_to_origin(self):
        return np.sqrt(self.x**2+self.y**2)
        
pt = Point(x=3.0)
pt.reflect("y")
print((pt.x, pt.y))
pt.y = 4.0
print(pt.distance_to_origin())

>>How to define inheritance in python
https://www.w3schools.com/python/python_inheritance.asp

inheritance

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

x = Student("Mike", "Olsen")
print(x.graduationyear)


















