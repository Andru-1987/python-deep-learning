css locators

css describe how the elements are displayed

> is the delimitor in css locator notation

html>body>div

blank space looks forward all generators

div > span p

css = "html > body div > p:nth-of-type(2)"   3rd paragraph sibling

p.class-1 selects all paragraph elements belonging to class-1

to find an element by id, use the pound sign

div#uid

selects the div element with id equal to uid

css_locator = 'div#uid > p.class1'

css_locator = '.class1'

>>>>>>>>

# Create the XPath string equivalent to the CSS Locator 
xpath = '/html/body/span[1]//a'

# Create the CSS Locator string equivalent to the XPath
css_locator = "html > body > span:nth-of-type(1) a"

>>>>>>>>

# Create the XPath string equivalent to the CSS Locator 
xpath = '//div[@id="uid"]/span//h4'

# Create the CSS Locator string equivalent to the XPath
css_locator = 'div#uid > span h4'

>>>>>>>


from scrapy import Selector

# Create a selector from the html (of a secret website)
sel = Selector( text = html )

# Fill in the blank
css_locator = ".course-block"

# Print the number of selected elements.
how_many_elements( css_locator )

>>>>>

# Create the CSS Locator to all children of the element whose id is uid
css_locator = "#uid >*"


>>>>  getting to the content

Using Xpath: <xpath-to-element>/@attr-name

xpath="//div[@id="uid"]/a/@href"

using css locator <css-to-element>::attr(attr-name)

css_locator='div#uid > a:attr(href)'


>>>>>> using text() in xpath

sel.xpath('//p[@id="p-example"]/text()').extract

>>>> find all text in the element and all text in its descendants

sel.xpath('//p[@id="p-example"]//text()').extract


>>>>> text from the css locator

sel.css('p#p-example::text').extract()

>>>> add a space before the :: for future generations

sel.css('p#p-example ::text').extract()


>>>>>>>

from scrapy import Selector

# Create a selector object from a secret website
sel = Selector( text=html)

# Select all hyperlinks of div elements belonging to class "course-block"
course_as = sel.css( 'div.course-block > a' )

# Selecting all href attributes chaining with css
hrefs_from_css = course_as.css( '::attr(href)' )

# Selecting all href attributes chaining with xpath
hrefs_from_xpath = course_as.xpath( "//@href" )


>>>>>>


# Create an XPath string to the desired text.
xpath = '//p[@id="#p3"]/text()'

# Create a CSS Locator string to the desired text.
css_locator = 'p#p3::text'

# Print the text from our selections
print_results( xpath, css_locator )

>>>>
# Create an XPath string to the desired text.
xpath = '//p[@id="p3"]//text()'

# Create a CSS Locator string to the desired text.
css_locator = "p#p3 ::text"

# Print the text from our selections
print_results( xpath, css_locator )
































