customer segmentation
1. group customers by the month of their first purchase
2. segment for frequency and monetary values
3. k-means clustering to find similar customers
4. experience in ecommerce, banking, consulting, and finance


What is cohort analysis

Dataframe fields: Invoice #, StockCode, Description, Quantity, Invoice Dt, UnitPrice, CustomerID, Country


1. it groups customers into mutually exclusive segments - cohorts

2. compare metrics across product lifecycle

3. compare metrics across customer lifecycle

>>Type of cohorts

1. time cohorts (behavior - time interval)
2. behavior cohorts (groups customers by product or service they have bought)
3. size cohorts (different size of cohorts , amount of spending for a certain period of time)

data is formatted as a pivot table

cohortMonth is a column in a pivot table
cohortIndex is months
metrics are in the table

>>Time cohorts

Columns
a. Time since first activity
b. Months since acquistion

Rows
a. First activity
b. Month of acquistion

The index is the months since acquistion.  the metric on the row is the percent of retention after a certain number of months represented by the intersection fo the month and the index in the pivot table.

>>Build the cohortDay

# Define a function that will parse the date
def get_day(x): return dt.datetime(x.year, x.month, x.day)  
# Create InvoiceDay column
online['InvoiceMonth'] = online['InvoiceDate'].apply(get_day) 

# Group by CustomerID and select the InvoiceDay value
grouping = online.groupby('CustomerID')['InvoiceMonth'] 

# Assign a minimum InvoiceDay value to the dataset
online['CohortDay'] = grouping.transform('min')

# View the top 5 rows
print(online.head())

def get_date_int(df,column):
	year=df[column].dt.year
	month=df[column].dt.month
	day=df[column].dt.day
	return year,month,day

# Get the integers for date parts from the `InvoiceDay` column
invoice_year, invoice_month, invoice_day = get_date_int(online, 'InvoiceDay')

# Get the integers for date parts from the `CohortDay` column
cohort_year, cohort_month, cohort_day  = get_date_int(online, 'CohortDay')

# Calculate difference in years
years_diff= invoice_year - cohort_year

# Calculate difference in months
months_diff= invoice_month - cohort_month

# Calculate difference in days
days_diff = invoice_day - cohort_day

# Extract the difference in days from all previous values
online['CohortIndex'] = years_diff * 365 + months_diff * 30 + days_diff + 1
print(online.head())

 online.head()

>> Count customers per metric

grouping= online.groupby(['CohortMonth','CohortIndex'])

cohort_data= grouping['CustomerID].apply(pd.Series.nunique)

cohort_data= cohort_data.reset_index()

cohort_counts= cohort_data.pivot(index='CohortMonth', columns='CohortIndex', values='CustomerID')


>>> calculate metrics

retention - how many customers have returned in the subsequence months


cohort_sizes= cohort_counts.iloc[:,0]

retention= cohort_counts.divide(chohort_sizes,axis=0)  #axis=0 divides along the row axis

retention.round(3) * 100

>>other metrics - Sum Quantity

grouping= online.groupby(['CohortMonth','CohortIndex'])
cohort_data=grouping['Quantity'].mean()
cohort_data=cohort_data.reset_index()

average_quantity= cohort_data.pivot(index='CohortMonth', columns='CohortIndex', values='Quantity')

average_quantity.round(1)

>> Unit price

# Create a groupby object and pass the monthly cohort and cohort index as a list
grouping = online.groupby(['CohortMonth', 'CohortIndex']) 

# Calculate the average of the unit price column
cohort_data = grouping['UnitPrice'].mean()

# Reset the index of cohort_data
cohort_data = cohort_data.reset_index()

# Create a pivot 
average_price = cohort_data.pivot(index='CohortMonth', columns='CohortIndex', values='UnitPrice')
print(average_price.round(1))


Analyze a cohort map using a heat map

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10,8))

plt.title('Retention rates')
sns.heatmap(data=retention,
annot=True,
fmt='.0%',
vmin=0.0,
vmax=0.5
cmap='BuGn'
)

plt.show()
























