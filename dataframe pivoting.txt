pivoting dataframes

id 	treatment	gender	response
1	A		F	5
2	A		M	3
3	B		F	8
4	B		M	9


trials.pivot(index='treatment',
	columns='gender',
	values='response')

gender	F	M
treatment
A	5	3
B	8	9



trials.pivot(index='treatment', columns='gender')

>>>>>  weekdays by city sum visitors

print(users)
# Pivot the users DataFrame: visitors_pivot
visitors_pivot = users.pivot(index='weekday', columns='city',values='visitors')

# Print the pivoted DataFrame
print(visitors_pivot)


city     Austin  Dallas
weekday                
Mon         326     456
Sun         139     237


>>>>>>>>>>>>>

# Pivot users with signups indexed by weekday and city: signups_pivot
signups_pivot = users.pivot(index='weekday',columns='city',values='signups')

# Print signups_pivot
print(signups_pivot)

# Pivot users pivoted by both signups and visitors: pivot
pivot = users.pivot(index='weekday',columns='city')

# Print the pivoted DataFrame
print(pivot)


city     Austin  Dallas
weekday                
Mon           3       5
Sun           7      12
        visitors        signups       
city      Austin Dallas  Austin Dallas
weekday                               
Mon          326    456       3      5
Sun          139    237       7     12


>>>>>>>>>>>>>>>>>>Stacking and unstacking dataframes

trials.unstack(level='gender')
trials.unstack(level=1)  #are equivalent

work with hierarchial columns

stackd=trials.stack(level='gender')

to swap levels

swapped =stacked.swaplevel(0,1)

sorted_trials=swapped.sort_index()


>>>>> unstack and stack

# Unstack users by 'weekday': byweekday
byweekday = users.unstack(level='weekday')

# Print the byweekday DataFrame
print(byweekday)

# Stack byweekday by 'weekday' and print it
print(byweekday.stack(level='weekday'))

visitors      signups    
weekday      Mon  Sun     Mon Sun
city                             
Austin       326  139       3   7
Dallas       456  237       5  12
                visitors  signups
city   weekday                   
Austin Mon           326        3
       Sun           139        7
Dallas Mon           456        5
       Sun           237       12
In [1]:


>>>>>sample

# Stack 'city' back into the index of bycity: newusers
newusers = bycity.stack(level='city')

# Swap the levels of the index of newusers: newusers
newusers = newusers.swaplevel(0,1)

# Print newusers and verify that the index is not sorted
print(newusers)

# Sort the index of newusers: newusers
newusers = newusers.sort_index()

# Print newusers and verify that the index is now sorted
print(newusers)

# Verify that the new DataFrame is equal to the original
print(newusers.equals(users))


visitors  signups
city   weekday                   
Austin Mon           326        3
Dallas Mon           456        5
Austin Sun           139        7
Dallas Sun           237       12
                visitors  signups
city   weekday                   
Austin Mon           326        3
       Sun           139        7
Dallas Mon           456        5
       Sun           237       12
True


>>>>>>>>>>>>>>>>>>melt dataframes

melt is used to move from pivoted data summary form columnar


two columns result from the columns

variable and value

pd.melt(new_trials, id_vars=['treatment'],
	value_vars=['F','M']
	var_name='gender'
	value_name='response'
	)

>>>>>sample melt id_vars and value_name

# Reset the index: visitors_by_city_weekday
visitors_by_city_weekday = visitors_by_city_weekday.reset_index()

# Print visitors_by_city_weekday
print(visitors_by_city_weekday)

# Melt visitors_by_city_weekday: visitors
visitors = pd.melt(visitors_by_city_weekday, id_vars=['weekday'], value_name='visitors')

# Print visitors
print(visitors)

city  level_0  index weekday  Austin  Dallas
0           0      0     Mon     326     456
1           1      1     Sun     139     237
  weekday     city  visitors
0     Mon  level_0         0
1     Sun  level_0         1
2     Mon    index         0
3     Sun    index         1
4     Mon   Austin       326
5     Sun   Austin       139
6     Mon   Dallas       456
7     Sun   Dallas       237
In [1]:
;

>>>>>>>sample id_vars muliple index

# Melt users: skinny
skinny = pd.melt(users,id_vars=['weekday','city'])

# Print skinny
print(skinny)


>>>>>>>>sample set_index

# Set the new index: users_idx
users_idx = users.set_index(['city','weekday'])

# Print the users_idx DataFrame
print(users_idx)

# Obtain the key-value pairs: kv_pairs
kv_pairs = pd.melt(users_idx,col_level=0)

# Print the key-value pairs
print(kv_pairs)


variable  value
0  visitors    139
1  visitors    237
2  visitors    326
3  visitors    456
4   signups      7
5   signups     12
6   signups      3
7   signups      5


>>>>>>>>>>>>>>>>>Pivot Tables

id
treatment
gender
response

more_trials.pivot(index='treatment',
	columns='gender',
	values='response')


pivot requires unique index pairing

pivot table summarizes by value not index

more_trials.pivot_table(index='treatment',
	columns='gender',
	values='response',
	aggfunc='count'
)

>>>>>>>sample

# Create the DataFrame with the appropriate pivot table: by_city_day
by_city_day = pd.pivot_table(users,index='weekday',columns='city')

# Print by_city_day
print(by_city_day)


>>>>>>>>sample

# Use a pivot table to display the count of each column: count_by_weekday1
count_by_weekday1 = pd.pivot_table(users,index='weekday',aggfunc='count')

# Print count_by_weekday
print(count_by_weekday1)

# Replace 'aggfunc='count'' with 'aggfunc=len': count_by_weekday2
count_by_weekday2 = pd.pivot_table(users,index='weekday',aggfunc=len)

# Verify that the same result is obtained
print('==========================================')
print(count_by_weekday1.equals(count_by_weekday2))

<<<<<<<<<<<sample margins=True

# Create the DataFrame with the appropriate pivot table: signups_and_visitors
signups_and_visitors = pd.pivot_table(users,index='weekday',aggfunc='sum')


# Print signups_and_visitors
print(signups_and_visitors)

# Add in the margins: signups_and_visitors_total 
signups_and_visitors_total = pd.pivot_table(users,index='weekday',aggfunc='sum',margins=True)

# Print signups_and_visitors_total
print(signups_and_visitors_total)


signups  visitors
weekday                   
Mon            8       782
Sun           19       376
         signups  visitors
weekday                   
Mon            8       782
Sun           19       376
All           27      1158

