import matplotlib.pyplot as plt

language_conversion_rate.plot(kind='bar')

plt.title('Conversion rate by language\n',size=16)
plt.xlabel('Language', size=14)
plt.ylabel('Conversation rate (%)',size=14)
plt.show()


>>>>>>>> conversion rate by language

# Create a bar chart using language_conversion_rate DataFrame
language_conversion_rate.plot(kind='bar')

# Add a title and x and y-axis labels
plt.title('Conversion rate by language\n', size =16)
plt.xlabel('Language', size = 16)
plt.ylabel('Conversion rate (%)', size = 16)

# Display the plot
plt.show()



daily_retention_rate=
	pd.DataFrame(daily_retention_rate.reset_index())

daily_retention_rate.columns=['date_subscribed','retention_rate']

plt.title('Daily subscriber quality\n',size=16)
plt.xlabel('1-month retention rate (%)', size=14)
plt.ylabel('Date',size=14)

#set the y-axis to begin at 0
plt.ylim(0)
plt.show()


>>>>> calculate the overall conversion rate

# Group by date_served and count unique users
total = marketing.groupby(['date_served'])['user_id']\
                     .nunique()

# Group by date_served and calculate subscribers
subscribers = marketing[marketing['converted'] == True]\
                         .groupby(['date_served'])\
                         ['user_id'].nunique()

# Calculate the conversion rate for all languages
daily_conversion_rates = subscribers/total


# Reset index to turn the results into a DataFrame
daily_conversion_rate = pd.DataFrame(daily_conversion_rates.reset_index())

# Rename columns
daily_conversion_rate.columns = ['date_served', 
                              'conversion_rate']

# Create a line chart using daily_conversion_rate
daily_conversion_rate.plot('date_subscribed','conversion_rate')

plt.title('Daily conversion rate\n', size = 16)
plt.ylabel('Conversion rate (%)', size = 14)
plt.xlabel('Date', size = 14)

# Set the y-axis to begin at 0
plt.ylim(0)

# Display the plot
plt.show()


>>>>>>>>>>>>>>>>>>> plotting the campaign

language = marketing.groupby(['date_served','language_preferred'])['user_id'].count()

print(language.head())


language = pd.DataFrame(language.unstack(level=1))

level=1 is the date_served index, moving from a multi-level hierarchy result to a dataframe of one index

language.plot()
plt.title('Daily language preferences')
plt.xlabel('Date')
plt.ylabel('Users')
plt.legend(loc='upper right',
	labels=language.columns.values)
plt.show()


language_age = marketing.groupby(['language_preferred','age_group'])['user_id'].count()

language_age = pd.DataFrame(language.unstack(level=1))

language.plot(kind='bar')
plt.title('Language preferences by age group')
plt.xlabel('Language')
plt.ylabel('Users')
plt.legend(loc='upper right',
	labels=language_age.columns.values)
plt.show()

>>>>>>>> Marketing channels by age group

channel_age = marketing.groupby(['marketing_channel', 'age_group'])\
                                ['user_id'].count()

# Unstack channel_age and transform it into a DataFrame
channel_age_df = pd.DataFrame(channel_age.unstack(level = 1))

# Plot channel_age
channel_age_df.plot(kind = 'bar')
plt.title('Marketing channels by age group')
plt.xlabel('Age Group')
plt.ylabel('Users')
# Add a legend to the plot
plt.legend(loc = 'upper right', 
           labels = channel_age_df.columns.values)
plt.show()

>>>>>>>>>>>>>>>

# Count the subs by subscribing channel and day
retention_total = marketing.groupby(['date_subscribed','subscribing_channel'])['user_id'].nunique()

# Print results
print(retention_total.head())

>>>>>>>>> calculate subscriptions

# Sum the retained subs by subscribing channel and date subscribed
retention_subs = marketing[marketing['is_retained']==True].groupby(['date_subscribed','subscribing_channel'])['user_id'].nunique()

# Print results
print(retention_subs.head())


>>>>>>>>> Retention rate by subscribing channel

# Divide retained subscribers by total subscribers
retention_rate = retention_subs/retention_total
retention_rate_df = pd.DataFrame(retention_rate.unstack(level=1))

# Plot retention rate
retention_rate_df.plot()

# Add a title, x-label, y-label, legend and display the plot
plt.title('Retention Rate by Subscribing Channel')
plt.xlabel('Date Subscribed',size=14)
plt.ylabel('Retention Rate (%)',size=14)
plt.legend(loc='upper right',labels=retention_rate_df.columns.values)
plt.show()