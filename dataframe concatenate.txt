How to connect two tables vertically


A	B	C
A1	B1	C1
A2	B2	C2
A3	B3	C3

A	B	C
A4	B4	C4
A5	B5	C5
A6	B6	C6

.concat
axis=0 means vertical and the default


concat is useful when data arrives at different periods of time

inv_jan (top)
inv_feb (middle)
inv_mar (bottom)

pd.concat([inv_jan,inv_feb,inv_mar])

The dataframes are combined in the order they are passed in.  Each tables index value is maintained.

pd.concat([inv_jan,inv_feb,inv_mar], ignore_index=True)


pd.concat([inv_jan,inv_feb,inv_mar], ignore_index=True, keys=['jan','feb','mar'])

create a key and index at the same time

>>>>>What if one of the tables has a new column

pd.concat([inv_jan,inv_feb],sort=True)

concat by default will include all the columns in the different tables.
sort will sort the columns by name from left to right.  NaN is inserted in the row and column with no data.

pd.concat([inv_jan,inv_feb], join="inner")

concat will only import matching columns for the rows it inserts.

>>>>>>>.append()
it is simplified concat() method
supports ignore_index and sort

inv_jan.append([inv_feb,inv_mar],
	ignore_index=True,
	sort=True)

append performs an outer join on the columns

>>>>Sample >>> concat

# Concatenate the tracks
tracks_from_albums = pd.concat([tracks_master,tracks_ride,tracks_st],
                               sort=True, keys=['master','ride','st'])
print(tracks_from_albums)

>>>Sample >> Ignore_index

# Concatenate the tracks so the index goes from 0 to n-1
tracks_from_albums = pd.concat([tracks_master,tracks_ride,tracks_st],
                               ignore_index=True,
                               sort=True)
print(tracks_from_albums)

>>>>Sample >>> only matching columns

# Concatenate the tracks, show only columns names that are in all tables
tracks_from_albums = pd.concat([tracks_master,tracks_ride,tracks_st],
                               join="inner",
                               sort=True)
print(tracks_from_albums)

>>>>>Sample >>> (Hierarchical Index)  Add keys and group by level 0

# Concatenate the tables and add keys
inv_jul_thr_sep = pd.concat([inv_jul,inv_aug,inv_sep], 
                            keys=['7Jul','8Aug','9Sep'])

# Group the invoices by the index keys and find avg of the total column
avg_inv_by_month = inv_jul_thr_sep.groupby(level=0).agg({'total':'mean'})

# Bar plot of avg_inv_by_month
avg_inv_by_month.plot.bar(y="total")
plt.show()

>>>>Sample  >>>> Append

# Use the .append() method to combine the tracks tables
metallica_tracks = tracks_master.append([tracks_ride,tracks_st], sort=False)

# Merge metallica_tracks and invoice_items
tracks_invoices = metallica_tracks.merge(invoice_items,on="tid")

print(tracks_invoices)
# For each tid and name sum the quantity sold
tracks_sold = tracks_invoices.groupby(['tid','name']).agg({'quantity':'sum'})

# Sort in decending order by quantity and print the results
print(tracks_sold.sort_values(by='quantity', ascending=False))











