Using dissociation to pair ebooks

The Zhang metric
1. takes values between -1 and 1
2. values of 1 indicates perfect association
3. value of -1 indicates perfect dissociation

Comprehensive and interpretable

Zhang(a->b)=confidence(a->b) - confidence(not a->b)
/Max [confidence(a->b), confidence(not a->b)]

confidence = support(a&b)/supportA


association is implied in confidence(a->b) 
dissociation is implied in confidence(not a->b)


Zhang(a->b) = support(a&b) - support(a) * support(b)/
max[support(ab)(1-support(a)), support(a)(support(b)-support(ab))]

supportH=hobbit.mean()
supportP=pride.mean()

supportHP = np.logical_and(hobbit,pride).mean()

num = supportHP - supportH*supportP
denom - max(supportHP*(1-supportH),supportH*(supportP-supportHP))


zhang - num/denom
print(zhang)

>>>>>> Zhang

# Compute the support of Twilight and Harry Potter
supportT = books['Twilight'].mean()
supportP = books['Potter'].mean()

# Compute the support of both books
supportTP = np.logical_and(books['Twilight'],books['Potter']).mean()

# Complete the expressions for the numerator and denominator
numerator = supportTP - supportT*supportP
denominator = max(supportTP*(1-supportT), supportT*(supportP-supportTP))

# Compute and print Zhang's metric
zhang = numerator / denominator
print(zhang)

0.17231567178855997

It had a positive value for Zhang's metric, indicating that the two books are not dissociated.

# Define a function to compute Zhang's metric
def zhang(antecedent, consequent):
	# Compute the support of each book
	supportA = antecedent.mean()
	supportC = consequent.mean()

	# Compute the support of both books
	supportAC = np.logical_and(antecedent, consequent).mean()

	# Complete the expressions for the numerator and denominator
	numerator = supportAC - supportA*supportC
	denominator = max(supportAC*(1-supportA), supportA*(supportC-supportAC))

	# Return Zhang's metric
	return numerator / denominator


>>>>>>>>>

# Define an empty list for Zhang's metric
zhangs_metric = []

# Loop over lists in itemsets
for itemset in itemsets:
    # Extract the antecedent and consequent columns
	antecedent = books[itemset[0]]
	consequent = books[itemset[1]]
    
    # Complete Zhang's metric and append it to the list
	zhangs_metric.append(zhang(antecedent, consequent))
    
# Print results
rules['zhang'] = zhangs_metric
print(rules)


antecedents  consequents  zhang
0       Potter       Hunger -0.306
1     Twilight       Hunger  0.109
2  Mockingbird       Hunger -0.525
3       Gatsby       Hunger -0.550
4       Potter     Twilight  0.245
5       Potter  Mockingbird -0.066
6       Potter       Gatsby -0.166
7  Mockingbird     Twilight -0.319
8       Gatsby     Twilight -0.371
9  Mockingbird       Gatsby  0.466










