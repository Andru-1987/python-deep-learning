-- Calculate the average, minimum and maximum
SELECT avg(DurationSeconds) AS Average, 
       min(DurationSeconds) AS Minimum, 
       max(DurationSeconds) AS Maximum
FROM Incidents

-- Calculate the aggregations by Shape
SELECT Shape,
       AVG(DurationSeconds) AS Average, 
       MIN(DurationSeconds) AS Minimum, 
       MAX(DurationSeconds) AS Maximum
FROM Incidents
Group by Shape
-- Return records where minimum of DurationSeconds is greater than 1
having min(DurationSeconds) > 1


>>>>>>>>>> finding missing data

select Country, InternetUse, Year from EconomicIndicators
where InternetUse is not null

select Country, InternetUse, Year from EconomicIndicators
where len(InternetUse)>0

select isnull(TradeGDPPercent,'unknown') as new_percent
from EconomicIndicators

select coalesce(TradeGDPPercent,ImportGoodPercent,'N/A') as new_percent
from EconomicIndicators

coalesce returns the first non-missing value

>>>>>

-- Return the specified columns
select IncidentDateTime, IncidentState
FROM Incidents
-- Exclude all the missing values from IncidentState  
WHERE IncidentState is not null


-- Check the IncidentState column for missing values and replace them with the City column
SELECT IncidentState, IsNull(IncidentState,City) AS Location
FROM Incidents
-- Filter to only return missing values from IncidentState
WHERE IncidentState Is Null

-- Replace missing values 
SELECT Country, coalesce(IncidentState, City, 'N/A') AS Location
FROM Incidents
WHERE Country IS NULL


>>>>>>>>>>>>>binning data with case

case when then end

select Continent
case when Continent='Europe' or Continent='Asia' then 'Eurasia' else 'Other' end as NewContinent
from EconomicIndicators

case statement is a good way to range data into groups

select country, LifeExp,
case when LifeExp < 30 then 1
when LifeExp > 29 and LifeExp < 40 then 2
when LifeExp > 39 and LifeExp < 50 then 3
when LifeExp > 49 and LifeExp < 60 then 4
else 5
end as LifeExpGroup
from EconomicIndicators
where Year=2007

SELECT Country, 
       CASE WHEN Country = 'us'  THEN 'USA'
       ELSE 'International'
       END AS SourceCountry
FROM Incidents

-- Complete the syntax for cutting the duration into different cases
SELECT DurationSeconds, 
-- Start with the 2 TSQL keywords, and after the condition a TSQL word and a value
      case when (DurationSeconds <= 120) then 1
-- The pattern repeats with the same keyword and after the condition the same word and next value          
       when (DurationSeconds > 120 AND DurationSeconds <= 600) then 2
-- Use the same syntax here             
       when (DurationSeconds > 601 AND DurationSeconds <= 1200) then 3
-- Use the same syntax here               
       when (DurationSeconds > 1201 AND DurationSeconds <= 5000) then 4
-- Specify a value      
       ELSE 5 
       END AS SecondGroup   
FROM Incidents

>>>>>>>>>>>>>>>>>Counting and Totals

select count(*) from incidents

count(distinct column_name)

select count(distinct Country) as Countries from Incidents

select count(distinct Country) as Countries,
Count(Distinct City) as Cities
from Incidents


group by count(), avg(), min(), max()

order by asc, desc

select count(*) as TotalRowsByCountry, Country
from incidents
group by Country
order by Country asc


-- Write a query that returns an aggregation 
select MixDesc, sum(Quantity) Total
FROM Shipments
-- Group by the relevant column
group by MixDesc


-- Count the number of rows by MixDesc
SELECT MixDesc, Count(*) Total
FROM Shipments
GROUP BY MixDesc

>>>>>>>>>>>>>>>>>>>>>>>>>>>>Dates>>>>>

DatePart
1. DD for day
2. MM for month
3. YY for year
4. HH for hour

DateAdd(): add or subtract datetime values
1. always return a date

DateDiff(): obtain the difference between two datetime values
1. always return a number


dateAdd(DatePart, number, date)

select DateAdd(DD,30,'2020-06-21')
select DateAdd(DD,-30,'2020-06-21')

datediff(datepart,startdate, enddate)

select datediff(dd,'2020-05-22','2020-06-21') as difference1
,datediff(dd,'2020-07-21','2020-06-21') as difference2

>>>>>

-- Return the difference in OrderDate and ShipDate
SELECT OrderDate, ShipDate, 
       DATEDIFF(DD, OrderDate, ShipDate) AS Duration
FROM Shipments

-- Return the DeliveryDate as 5 days after the ShipDate
SELECT OrderDate, 
       DATEADD(DD,5,ShipDate) AS DeliveryDate
FROM Shipments

>>>>>>>> rounding and truncating numbers

round(number, length)

select DurationSeconds,
round(DurationSeconds,0) as RoundToZero,
round(DurationSeconds,1) as RoundToOne
from Incidents


select DurationSeconds,
round(DurationSeconds,-1) as RoundToTen,
round(DurationSeconds,-2) as RoundToHundred
from Incidents

Round(DurationSeconds,0,1) as Truncating

>>>>>>>>

-- Round Cost to the nearest dollar
SELECT Cost, 
       Round(Cost,0) AS RoundedCost
FROM Shipments

-- Truncate cost to whole number
SELECT Cost, 
       Round(Cost,0,1) AS TruncateCost
FROM Shipments

>>>>>>>>>>>>>>> more math functions
abs(number)  returns non-negative values

sqrt(number ) square root of a number
square(number) square of a number
log(number) returns the natural logarithm


select DurationSeconds, Log(DurationSeconds,10) as LogSeconds from Incidents

>>>>>>

-- Return the absolute value of DeliveryWeight
SELECT DeliveryWeight,
       ABS(DeliveryWeight) AS AbsoluteValue
FROM Shipments

-- Return the square and square root of WeightValue
SELECT WeightValue, 
       Square(WeightValue) AS WeightSquare, 
       Sqrt(WeightValue) AS WeightSqrt
FROM Shipments


>>>>>>> while loops

declare @variablename data_type

1. varchar(n) : variable length text field
2. int: -2,147,483,647 to 2,147,483,647
3. decimal (p,s) numeric(p,s)
p total number of digits stored to the left of the decimal
s total number of digits stored to the right of the decimal

declare @Snack varchar(10)
set @Snack='Cookie'
select @Snack='Cookie'

while condition
begin
	break
	continue
end

declare @ctr int
set @ctr=1

while @ctr<10
	begin
		set @ctr=@ctr+1

		if @ctr=4
			break
	end

select @ctr

break will exist the loop


>>>>>>

-- Declare the variable (a SQL Command, the var name, the datatype)
DECLARE @Counter INT

-- Set the counter to 20
SET @Counter=20

-- Select the counter
SELECT @counter


-- Declare the variable (a SQL Command, the var name, the datatype)
DECLARE @counter INT 

-- Set the counter to 20
SET @counter = 20

-- Select and increment the counter by one 
SELECT @counter=@counter+1

-- Print the variable
SELECT @counter

DECLARE @counter INT 
SET @counter = 20

-- Create a loop
WHILE @counter<30

-- Loop code starting point
BEGIN
	SELECT @counter = @counter + 1
-- Loop finish
END

-- Check the value of the variable
SELECT @counter


>>>>>>>>>> derived tables

derived tables are used when you want to break down a query into smaller steps.

select a.* from Kidney a
join (select avg(Age) as AverageAge from Kidney) b
on a.Age=b.AverageAge

>>>>>>>>

SELECT a.RecordId, a.Age, a.BloodGlucoseRandom, 
-- Select maximum glucose value (use colname from derived table)    
       b.MaxGlucose
FROM Kidney a
-- Join to derived table
Join (SELECT Age, MAX(BloodGlucoseRandom) AS MaxGlucose FROM Kidney GROUP BY Age) b
-- Join on Age
ON a.Age=b.Age


SELECT *
FROM Kidney a
-- Create derived table: select age, max blood pressure from kidney grouped by age
JOIN (select Age, Max(BloodPressure) as MaxBloodPressure from Kidney GROUP BY Age) b
-- JOIN on BloodPressure equal to MaxBloodPressure
ON a.BloodPressure=b.MaxBloodPressure
-- Join on Age
AND a.Age=b.Age

>>>>>>>>>>>> common type table

with CTEName(Col1,Col2)
as
(select Col1, Col2 from TableName
)


WITH BloodPressureAge(Age, MaxBloodPressure)
as
(
select Age, Max(BloodPressure) as MaxBloodPressure from Kidney GROUP BY Age)


select a.Age, Min(a.BloodPressure), b.MaxBloodPresure
from Kidney a
join BloodpressureAge b
on a.Age=b.Age
group by a.Age, b.MaxBloodPressure

>>>>>>>>

-- Specify the keyowrds to create the CTE
WITH BloodGlucoseRandom (MaxGlucose) 
AS (SELECT MAX(BloodGlucoseRandom) AS MaxGlucose FROM Kidney)

SELECT a.Age, b.MaxGlucose
FROM Kidney a
-- Join the CTE on blood glucose equal to max blood glucose
JOIN BloodGlucoseRandom b
ON a.BloodGlucoseRandom=b.MaxGlucose


-- Create the CTE
WITH BloodPressure 
AS (select Max(BloodPressure) MaxBloodPressure from Kidney)

SELECT *
FROM Kidney a
-- Join the CTE  
JOIN BloodPressure b
ON a.BloodPressure=b.MaxBloodPressure

>>>>>>>>>>>>window t-sql

current row, previous row and the next row

OVER (PARTITION by SalesYear ORDER BY SalesYear)

select SalesPerson, SalesYear, CurrentQuota,
Sum(CurrentQuota) over (Partition by SalesYear) as YearlyTotal,
ModifiedDate as ModDate
From SaleGoal


>>>>>>


SELECT OrderID, TerritoryName, 
       -- Total price for each partition
       SUM(OrderPrice) 
       -- Create the window and partitions
       OVER(PARTITION BY TerritoryName) AS TotalPrice
FROM Orders

SELECT OrderID, TerritoryName, 
       -- Number of rows per partition
       COUNT(*)
       -- Create the window and partitions
       OVER(PARTITION BY TerritoryName) AS TotalOrders
FROM Orders


<<<<<<< common window functions

lead() next row in the window
lag() previous row in the window 
first_value() returns the first value in a window 
last_value() returns the last value in a window


select SalesPerson, SalesYear, CurrentQuota
FIRST_VALUE(CurrentQuota) over (partition by SalesYear Order by ModifiedDate) as StartQuota,
LAST_VALUE(CurrentQuota) over (partition by SalesYear Order by ModifiedDate) as EndQuota,
ModifiedDate as ModDate
from SaleGoal

select SalesPerson, SalesYear, CurrentQuota,
Lead(CurrentQuota) Over (Partition by SalesYear Order by ModifiedDate) as NextQuota,
ModifiedDate as ModDate
from SaleGoal

select SalesPerson, SalesYear, CurrentQuota,
Lag(CurrentQuota) Over (Partition by SalesYear Order by ModifiedDate) as PreviousQuota,
ModifiedDate as ModDate
from SaleGoal


>>>>>>>

SELECT TerritoryName, OrderDate, 
       -- Select the first value in each partition
       FIRST_VALUE(OrderDate) 
       -- Create the partitions and arrange the rows
       OVER(PARTITION BY TerritoryName ORDER BY OrderDate) AS FirstOrder
FROM Orders

SELECT TerritoryName, OrderDate, 
       -- Specify the previous OrderDate in the window
       LAG(OrderDate) 
       -- Over the window, partition by territory & order by order date
       OVER(PARTITION BY TerritoryName Order BY OrderDate) AS PreviousOrder,
       -- Specify the next OrderDate in the window
       LEAD(OrderDate) 
       -- Create the partitions and arrange the rows
       OVER(PARTITION BY TerritoryName Order BY OrderDate) AS NextOrder
FROM Orders

>>>>>>>>> Increasing window complexity


select SalesPerson, SalesYear, CurrentQuota,
Sum(CurrentQuota)
Over (Partition by SalesYear order by ModifiedDate) as RunningTotal,
ModifiedDate as ModDate
from SaleGoal

select SalesPerson, SalesYear, CurrentQuota,
ROW_NUMBER()
OVER (PARTITION BY SalesPerson Order by SalesYear) as QuotabySalesPerson
From SaleGoal



>>>>>>


SELECT TerritoryName, OrderDate, 
       -- Create a running total
       ROW_NUMBER()
       -- Create the partitions and arrange the rows
       OVER(PARTITION BY TerritoryName ORDER BY OrderDate) AS TerritoryTotal	  
FROM Orders

SELECT TerritoryName, OrderDate, 
       -- Create a running total
       SUM(OrderPrice)
       -- Create the partitions and arrange the rows
       OVER(PARTITION BY TerritoryName ORDER BY OrderDate) AS TerritoryTotal	  
FROM Orders


>>>>>>>>> Using windows for statistical functions


STDEV() - calculates the standard deviation


select SalesPerson, SalesYear, CurrentQuota,
STDEV(CurrentQuota)
OVER () StandardDev,
ModifiedDate as ModDate
From SaleGoal

one window over the whole table

select SalesPerson, SalesYear, CurrentQuota,
STDEV(CurrentQuota)
OVER (PARTITION BY SalesYear Order by SalesYear) StandardDev,
ModifiedDate as ModDate
From SaleGoal

window by SalesYear

Mode is the value which appeas the most often in your data
1. create a cte containing an ordered count of values using ROW_NUMBER
2. write a query using the CTE to pick the value with the highest row number


with QuotaCount as (
select SalesPerson, SalesYear, CurrentQuota,
ROW_NUMBER()
OVER (PARTITION BY CurrentQuota ORDER BY CurrentQuota) as QuotaList
from SaleGoal)

select * from QuotaCount
where QuotaList in (select max(QuotaList) from QuotaCount)



>>>>>>
SELECT OrderDate, TerritoryName, 
       -- Calculate the standard deviation
	   STDEV(OrderPrice)
       OVER(PARTITION BY TerritoryName ORDER BY OrderDate) AS StdDevPrice	  
FROM Orders


-- Create a CTE Called ModePrice which contains two columns
WITH ModePrice (OrderPrice, UnitPriceFrequency)
as
(
	SELECT OrderPrice, 
	ROW_NUMBER() 
	OVER(PARTITION BY OrderPrice ORDER BY OrderPrice) AS UnitPriceFrequency
	FROM Orders 
)

-- Select everything from the CTE
select * from ModePrice


-- CTE from the previous exercise
WITH ModePrice (OrderPrice, UnitPriceFrequency)
AS
(
	SELECT OrderPrice,
	ROW_NUMBER() 
    OVER (PARTITION BY OrderPrice ORDER BY OrderPrice) AS UnitPriceFrequency
	FROM Orders
)

-- Select the order price from the CTE
SELECT OrderPrice AS ModeOrderPrice
FROM ModePrice
-- Select the maximum UnitPriceFrequency from the CTE
WHERE UnitPriceFrequency IN (SELECT MAX(UnitPriceFrequency) FROM ModePrice)












































































