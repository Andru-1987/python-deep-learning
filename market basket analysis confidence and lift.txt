confidence and lift

1. we can improve over support with additional metrics
2. Adding confidence provides a more complete picture

support(x&y)/support(x)

confidence tells the probability we will purchase y given we have purchased x


The lift metric

1. support(x&y)/support(x)*support(y)

a. numerator: the proportion of transactions that contain x and y
b. denominator: proportion if x and y assigned randomly and independently

A lift >1 tell us they occur more often than we expect than based on their support values.  This means this relationship is unlikely by random chance



# Compute support for Hunger and Potter
supportHP = np.logical_and(books['Hunger'], books['Potter']).mean()

# Compute support for Hunger and Twilight
supportHT = np.logical_and(books['Hunger'], books['Twilight']).mean()

# Compute support for Potter and Twilight
supportPT = np.logical_and(books['Potter'], books['Twilight']).mean()

# Print support values
print("Hunger Games and Harry Potter: %.2f" % supportHP)
print("Hunger Games and Twilight: %.2f" % supportHT)
print("Harry Potter and Twilight: %.2f" % supportPT)

Hunger Games and Harry Potter: 0.12
    Hunger Games and Twilight: 0.09
    Harry Potter and Twilight: 0.14

Harry Potter and Twilight appear to be the best options for cross-promotion


# Compute support for Potter and Twilight
supportPT = np.logical_and(books['Potter'], books['Twilight']).mean()

# Compute support for Potter
supportP = books['Potter'].mean()

# Compute support for Twilight
supportT = books['Twilight'].mean()

# Compute confidence for both rules
confidencePT = supportPT / supportP
confidenceTP = supportPT / supportT

print('{0:.2f}, {1:.2f}'.format(supportP, supportT))
0.48, 0.26
# Print results
print('{0:.2f}, {1:.2f}'.format(confidencePT, confidenceTP))

0.29, 0.55

Even though the support is identical for the two association rules, the confidence is much higher for Twilight -> Harry Potter, since Harry Potter has a higher support than Twilight.

>>>>>> calculating lift

# Compute support for Potter and Twilight
supportPT = np.logical_and(books['Potter'], books['Twilight']).mean()

# Compute support for Potter
supportP = books['Potter'].mean()

# Compute support for Twilight
supportT = books['Twilight'].mean()

# Compute lift
lift = supportPT / (supportP * supportT)

# Print lift
print("Lift: %.2f" % lift)

Lift: 1.15

 lift is greater than 1.0. This could give us some confidence that the association rule we recommended did not arise by random chance


















