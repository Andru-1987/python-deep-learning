>>>>>>>>>>>>>>>>>Least Squares Optimization

a1=covariance(x,y)/variance(x)
a0=mean(y) - a1*mean(x)


steps

x_mean=np.mean(x)
y_mean=np.mean(y)

x_dev=x-x_mean
y_dev=y-y_mean

covariance= np.sum(x_dev*y_dev)
variance= np.sum(x_dev**2)

a1 = covariance/variance
a0 = y_mean - (a1*x_mean)

>>>>>>>>>Optimize

from scipy import optimize

x_data,y_data = load_data()

def model_func(x,a0,a1):
	return a0 + (a1*x)


param_opt,param_cov= optimize.curve_fit(model_func, x_data, y_data)

a0= param_opt[0] #a0 is the intercept
a1= param_opt[1] #a1 is the slope

print("optimize library a0={} and a1={}".format(a0,a1))


>>>>>>> Least squares OLS

df=pd.DataFrame(dict(x_name=x_data,y_name=y_data))
model_fit = ols(formula="y_name ~ x_name", data=df).fit()

a0 = model_fit.params['Intercept']
a1 = model_fit.params['x_name']

print( "ols a0 = {:0.4f}".format(a0) )
print( "ols a1 = {:0.4f}".format(a1) )


>>>>>Sample   >>> manually calculate a linear model

# prepare the means and deviations of the two variables
x_mean = np.mean(x)
y_mean = np.mean(y)
x_dev = x - x_mean
y_dev = y - y_mean

# Complete least-squares formulae to find the optimal a0, a1
a1 = np.sum(x_dev * y_dev) / np.sum( np.square(x_dev) )
a0 =y_mean - (a1 * x_mean)

# Use the those optimal model parameters a0, a1 to build a model
y_model = model(x, a0, a1)

# plot to verify that the resulting y_model best fits the data y
fig, rss = compute_rss_and_plot_fit(a0, a1)


>>>>>Sample >>>> using optimize to create a linear model

# Define a model function needed as input to scipy
def model_func(x, a0, a1):
    return a0 + (a1*x)

# Load the measured data you want to model
x_data, y_data  = load_data()

# call curve_fit, passing in the model function and data; then unpack the results
param_opt, param_cov = optimize.curve_fit(model_func, x_data, y_data)
a0 = param_opt[0]  # a0 is the intercept in y = a0 + a1*x
a1 = param_opt[1]  # a1 is the slope     in y = a0 + a1*x

# test that these parameters result in a model that fits the data
fig, rss = compute_rss_and_plot_fit(a0, a1)

>>>>>Sample >>> using ols to model a linear model

# Pass data and `formula` into ols(), use and `.fit()` the model to the data
model_fit = ols(formula="y_column ~ x_column", data=df).fit()

# Use .predict(df) to get y_model values, then over-plot y_data with y_model
y_model = model_fit.predict(df)
fig = plot_data_with_model(x_data, y_data, y_model)

# Extract the a0, a1 values from model_fit.params
a0 = model_fit.params['Intercept']
a1 = model_fit.params['x_column']

# Visually verify that these parameters a0, a1 give the minimum RSS
fig, rss = compute_rss_and_plot_fit(a0, a1)



