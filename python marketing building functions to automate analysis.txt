def retention_rate(dataframe, column_names):

	retained = dataframe[dataframe['is_retained']==True].groupby(column_names)['user_id'].nunique()

	converted=dataframe[dataframe['converted']==True].groupby(column_names)['user_id'].nunique()
	retention_rate=retained/converted
	return retention_rate



daily_retention=retention_rate(marketing,['date_subscribed','subscribing_channel'])

daily_retention = pd.DataFrame(daily_retention.unstack(level=1))

print(daily_retention.head())


def plotting(dataframe):

	for column in dataframe:
		plt.plot(dataframe.index, dataframe[column])
		plt.title('Daily '+column+' retention rate\n',
			size=16)
		plt.ylabel('Retention rate (%)',size=14)
		plt.xlabel('Date',size=14)
		plt.show()

plotting(daily_channel_retention)

>>>>>>>>>>>>>>>>>>>>>>>>


def conversion_rate(dataframe, column_names):
    # Total number of converted users
    column_conv = dataframe[dataframe['converted'] == True]\
                       .groupby(column_names)['user_id'].nunique()

    # Total number users
    column_total = dataframe.groupby(column_names)['user_id'].nunique()
    
    # Conversion rate 
    conversion_rate = column_conv/column_total
    
    # Fill missing values with 0
    conversion_rate = conversion_rate.fillna(0)
    return conversion_rate


>>>>>>>>>>>>>>>>>>>>>>>>

# Calculate conversion rate by age_group
age_group_conv = conversion_rate(marketing, ['date_served', 'age_group'])
print(age_group_conv)

# Unstack and create a DataFrame
age_group_df = pd.DataFrame(age_group_conv.unstack(level=1))

# Visualize conversion by age_group
age_group_df.plot()
plt.title('Conversion rate by age group\n', size = 16)
plt.ylabel('Conversion rate', size = 14)
plt.xlabel('Age group', size = 14)
plt.show()

>>>>>>>>>>>>>>>>>>

def plotting_conv(dataframe):
    for column in dataframe:
        # Plot column by dataframe's index
        plt.plot(dataframe.index,dataframe[column])
        plt.title('Daily ' + str(column) + ' conversion rate\n', 
                  size = 16)
        plt.ylabel('Conversion rate', size = 14)
        plt.xlabel('Date', size = 14)
        # Show plot
        plt.show()
        plt.clf()


>>>>>>>>>>>>
# Calculate conversion rate by date served and age group
age_group_conv = conversion_rate(marketing, ['date_served', 'age_group'])

# Unstack age_group_conv and create a DataFrame
age_group_df = pd.DataFrame(age_group_conv.unstack(level=1))

# Plot the results
plotting_conv(age_group_df)
