>>Printing a list of tables

# Import create_engine
from sqlalchemy import create_engine

# Create an engine that connects to the census.sqlite file: engine
engine = create_engine('sqlite:///census.sqlite')

# Print table names
print(engine.table_names())

>>using reflection to get object definition metadata

def pyconn():
    return connection
engine=create_engine('mssql://',creator=pyconn)
#print(engine.table_names())
metadata=MetaData()
equipment=Table('bEMEM', metadata,autoload=True,autoload_with=engine)
print(repr(equipment))

>>displaying columns

from sqlalchemy import create_engine, MetaData, Table

engine = create_engine('sqlite:///census.sqlite')

metadata = MetaData()

# Reflect the census table from the engine: census
census = Table('census', metadata,autoload=True,autoload_with=engine)

# Print the column names
print(census.columns.keys())

# Print full metadata of census
print(repr(census))

>>Proxy

connection=engine.connect()
stmt='select * from people'
result_proxy=connection.execute(stmt)
results=result_proxy.fetchall()

first_row=results[0]
print(first_row.keys())
print(first_row.state)

sqlalchemy hides differences between backend database types

>>Select fetchmany

# Import select
from sqlalchemy.sql import select
from sqlalchemy import MetaData, Table

# Reflect census table via engine: census
census = Table('census', metadata, autoload=True, autoload_with=engine)

# Build select statement for census table: stmt
stmt = select([census])

# Print the emitted statement to see the SQL string
print(stmt)

# Execute the statement on connection and fetch 10 records: result
results = connection.execute(stmt).fetchmany(size=10)

# Execute the statement and print the results
print(results)

>>> select where

stmt = select ([census])
stmt = stmt.where(census.columns.state=='California')
results = connection.execute(stmt).fetchall()

for result in results:
	print(result.state, result.age)


restrict data returned by a query based on boolean conditions

compare a column against a value or another column

in, like, between, startswith  methods on the column

conjunctions: and_() or_() not_()


from sqlalchemy import or_

stmt = select ([census])
stmt = stmt.where(
or_(census.columns.state=='California',census.columns.state=='New York'))

results = connection.execute(stmt).fetchall()

for result in results:
	print(result.state, result.age)

sample

# Import create_engine function
from sqlalchemy import create_engine

# Create an engine to the census database
engine = create_engine('postgresql+psycopg2://student:datacamp@postgresql.csrrinzqubik.us-east-1.rds.amazonaws.com:5432/census')

# Use the .table_names() method on the engine to print the table names
print(engine.table_names())

['census', 'new_data', 'census1', 'data', 'data1', 'employees', 'employees3', 'employees_2', 'nyc_jobs', 'final_orders', 'state_fact', 'orders', 'users', 'vrska']


sample _in

# Define a list of states for which we want results
states = ['New York', 'California', 'Texas']

# Create a query for the census table: stmt
stmt = select([census])

# Append a where clause to match all the states in_ the list states
stmt = stmt.where(census.columns.state.in_(states))

# Loop over the ResultProxy and print the state and its population in 2000
for result in connection.execute(stmt):
    print(result.state,result.pop2000)


sample and_

# Import and_
from sqlalchemy import and_

# Build a query for the census table: stmt
stmt = select([census])

# Append a where clause to select only non-male records from California using and_
stmt = stmt.where(
    # The state of California with a non-male sex
    and_(census.columns.state == 'California',
         census.columns.sex != 'M'
         )
)

# Loop over the ResultProxy printing the age and sex
for result in connection.execute(stmt).fetchall():
    print(result.age, result.sex)


>>>>>>> ordering query results

order_by()


stmt=select([census.columns.state])
stmt=stmt.order_by(census.columns.state)

results=connection.execute(stmt).fetchall()

print(results([:10])

stmt=stmt.order_by(desc(census.columns.state))


sample  >>> order_by

# Build a query to select the state column: stmt
stmt = select([census.columns.state])

# Order stmt by the state column
stmt = stmt.order_by(census.columns.state)

# Execute the query and store the results: results
results = connection.execute(stmt).fetchall()

# Print the first 10 results
print(results[:10])

sample >> order_by desc


# Import desc
from sqlalchemy import desc

# Build a query to select the state column: stmt
stmt = select([census.columns.state])

# Order stmt by state in descending order: rev_stmt
rev_stmt = stmt.order_by(desc(census.columns.state))

# Execute the query and store the results: rev_results
rev_results = connection.execute(rev_stmt).fetchall()

# Print the first 10 rev_results
print(rev_results[:10])


sample

# Build a query to select state and age: stmt
stmt = select([census.columns.state,census.columns.age])

# Append order by to ascend by state and descend by age
stmt = stmt.order_by(census.columns.state,census.columns.age)

# Execute the statement and store all the records: results
results = connection.execute(stmt).fetchall()

# Print the first 20 results
print(results[:20])

>>>>>>>>>>>>>>>aggregation functions

count, sum

from sqlalchemy import func

stmt=select ([func.sum(census.columns.pop2008)])


results=connection.execute(stmt).scaler()

print(results)

group by


stmt = select([census.columns.age,census.columns.sex,func.sum(census.columns.pop2008).label('pop2008_sum')])
stmt = stmt.group_by(census.columns.age,census.columns.sex)
results = connection.execute(stmt).fetchall()


sample

# Build a query to count the distinct states values: stmt
stmt = select([func.count(func.distinct(census.columns.state))])

# Execute the query and store the scalar result: distinct_state_count
distinct_state_count = connection.execute(stmt).scalar()

# Print the distinct_state_count
print(distinct_state_count)

51

sample


# Import func
from sqlalchemy import func

# Build a query to select the state and count of ages by state: stmt
stmt = select([census.columns.state, func.count(census.columns.age)])

# Group stmt by state
stmt = stmt.group_by(census.columns.state)

# Execute the statement and store all the records: results
results = connection.execute(stmt).fetchall()

# Print results
print(results)

# Print the keys/column names of the results returned
print(results[0].keys())


sample >>> group by and label

# Import func
from sqlalchemy import func

# Build an expression to calculate the sum of pop2008 labeled as population
pop2008_sum = func.sum(census.columns.pop2008).label('population')

# Build a query to select the state and sum of pop2008: stmt
stmt = select([census.columns.state, pop2008_sum])

# Group stmt by state
stmt = stmt.group_by(census.columns.state)

# Execute the statement and store all the records: results
results = connection.execute(stmt).fetchall()

# Print results
print(results)

# Print the keys/column names of the results returned
print(results[0].keys())


>>>>>>>>> visuals

import pandas as pd

df=pd.DataFrame(results)
df.columns=results[0].keys()

df[10:20].plot.barh()
plt.show()

sample

# import pandas
import pandas as pd

# Create a DataFrame from the results: df
df = pd.DataFrame(results)

# Set column names
df.columns = results[0].keys()

# Print the DataFrame
print(df)

sample

# Import pyplot as plt from matplotlib
import matplotlib.pyplot as plt

# Create a DataFrame from the results: df
df = pd.DataFrame(results)

# Set Column names
df.columns = results[0].keys()

# Print the DataFrame
print(df)


# Plot the DataFrame
df.plot.bar()
plt.show()


>>>>>> calculating values

stmt=select([census.columns.age,
(census.columns.pop2008 - census.columns.pop2000).label('pop_change')])

stmt=stmt.group_by(census.columns.age)
stmt=stmt.order_by(desc('pop_change'))


>>>>>>>>>>>case statement
from sqlalchemy import case

stmt=select ([
	func.sum(
		case([
			(census.columns.state=='New York',
			census.columns.pop2008)
			],else_=0))])



stmt=select ([
	func.sum(
		case([
			(census.columns.state=='New York',
			census.columns.pop2008)
			],else_=0))
			/
		cast(func.sum(census.columns.pop2008),
	Float) * 100).label('ny_percent')])



])


sample

# Import create_engine function
from sqlalchemy import create_engine

# Create an engine to the census database
engine = create_engine('mysql+pymysql://student:datacamp@courses.csrrinzqubik.us-east-1.rds.amazonaws.com:3306/census')

# Print the table names
print(engine.table_names())

sample


# Build query to return state names by population difference from 2008 to 2000: stmt
stmt = select([census.columns.state, (census.columns.pop2008-census.columns.pop2000).label('pop_change')])

# Append group by for the state: stmt_grouped
stmt_grouped = stmt.group_by(census.columns.state)

# Append order by for pop_change descendingly: stmt_ordered
stmt_ordered = stmt_grouped.order_by('pop_change')

# Return only 5 results: stmt_top5
stmt_top5 = stmt_ordered.limit(5)

# Use connection to execute stmt_top5 and fetch all results
results = connection.execute(stmt_top5).fetchall()

# Print the state and population change for each record
for result in results:
    print('{}:{}'.format(result.state, result.pop_change))

sample

# import case, cast and Float from sqlalchemy
from sqlalchemy import case, cast, Float

# Build an expression to calculate female population in 2000
female_pop2000 = func.sum(
    case([
        (census.columns.sex == 'F',census.columns.pop2000)
    ], else_=0))

# Cast an expression to calculate total population in 2000 to Float
total_pop2000 = cast(func.sum(census.columns.pop2000), Float)

# Build a query to calculate the percentage of women in 2000: stmt
stmt = select([female_pop2000 / total_pop2000* 100])

# Execute the query and store the scalar result: percent_female
percent_female = connection.execute(stmt).scalar()

# Print the percentage
print(percent_female)


>>>>>>> joins

select_from
used to replace the default, derived from clause with a join


stmt = select ([func.sum(census.columns.pop2000)])
stmt = stmt.select_from(census.join(state_fact))
stmt = stmt.where(state_fact.columns.circuit_court=='10)
result=connect.execute(stmt).scalar()
print(result)

stmt = select ([func.sum(census.columns.pop2000)])

stmt= stmt.select_from(
	census.join(state_fact,census.columns.state==
state_fact.columns.name))

stmt=stmt.where(
	state_fact.columns.census_division_name=='East South Central')

sample

# Build a statement to join census and state_fact tables: stmt
stmt = select([census.columns.pop2000, state_fact.columns.abbreviation])

# Execute the statement and get the first result: result
result = connection.execute(stmt).first()

# Loop over the keys in the result object and print the key and value
for key in result.keys():
    print(key, getattr(result, key))


sample

# Build a statement to select the state, sum of 2008 population and census
# division name: stmt
stmt = select([
    census.columns.state,
    func.sum(census.columns.pop2008),
    state_fact.columns.census_division_name
])

# Append select_from to join the census and state_fact tables by the census state and state_fact name columns
stmt_joined = stmt.select_from(
    census.join(state_fact, census.columns.state == state_fact.columns.name)
)

# Append a group by for the state_fact name column
stmt_grouped = stmt_joined.group_by(census.columns.state,state_fact.columns.census_division_name)

# Execute the statement and get the results: results
results = connection.execute(stmt_grouped).fetchall()

# Loop over the results object and print each record.
for record in results:
    print(record)


>>>>>>> working with hierarchial tables

alias()
1. requires a way to view the table via multiple names
2. creates a unique reference that we can use





sample


# Build a statement to select the census and state_fact tables: stmt
stmt = select([census,state_fact])

# Add a select_from clause that wraps a join for the census and state_fact
# tables where the census state column and state_fact name column match
stmt_join = stmt.select_from(
    census.join(state_fact, census.columns.state == state_fact.columns.name))

# Execute the statement and get the first result: result
result = connection.execute(stmt_join).first()

# Loop over the keys in the result object and print the key and value
for key in result.keys():
    print(key, getattr(result, key))

>>>>>>> hierarchial tables

id
name
job
manager (employee and a record in the table)

managers= employees.alias()

stmt=select(
	[managers.columns.name.label('manager'),
	employees.columns.name.label('employee')
	])

stmt=stmt.select_from(employees.join(managers, managers.columns.id==employees.columns.manager)

stmt=stmt.order_by(managers.columns.name)
print(connection.execute(stmt).fetchall())

sample

# Build a query to select names of managers and their employees: stmt
stmt = select(
    [managers.columns.name.label('manager'),
     employees.columns.name.label('employee')]
)

# Match managers id with employees mgr: stmt_matched
stmt_matched = stmt.where(managers.columns.id == employees.columns.mgr)

# Order the statement by the managers name: stmt_ordered
stmt_ordered = stmt_matched.order_by(managers.columns.name)

# Execute statement: results
results = connection.execute(stmt_ordered).fetchall()

# Print records
for record in results:
    print(record)

sample

# Make an alias of the employees table: managers
managers = employees.alias()

# Build a query to select names of managers and counts of their employees: stmt
stmt = select([managers.columns.name, func.count(employees.columns.name)])

# Append a where clause that ensures the manager id and employee mgr are equal
stmt_matched = stmt.where(managers.columns.id==employees.columns.mgr)
# Group by Managers Name
stmt_grouped = stmt_matched.group_by(managers.columns.name)

# Execute statement: results
results = connection.execute(stmt_grouped).fetchall()

# print manager
for record in results:
    print(record)


>>>>>>>>>>> handling large datasets

fetchmany() lets us specify how many rows we want to act upon

we have to close the ResultProxy afterwards


while more_results:
	partial_results=results_proxy.fetchmany(50)
	if not partial_results:
		more_results=False
	for row in partial_results:
	   if row.state in state_count:
               state_count[row.state]+=1
           else:
               state_count[row.state=1


>>>>>>>>> building a table

from sqlalchemy import (Table, Column, String, Integer, Decimal, Boolean)

employees=Table('employees',metadata,
Column('id',Integer()),
Column('name',String(255)),
Column('salary',Decimal()),
Column('active',Boolean())
)

metadata.create_all(engine)

constraints:
1. unique forces all values for the data in a column to be unique
2. nullable determines if a column can be empty in a row
3. default set a default value if one isn't supplied

employees=Table('employees',metadata,
Column('id',Integer()),
Column('name',String(255),unique=True, nullable=False),
Column('salary',Decimal(),default=100.0),
Column('active',Boolean(),default=True)
)

print(employee.constraints)

sample


# Import Table, Column, String, Integer, Float, Boolean from sqlalchemy
from sqlalchemy import Table, Column, String, Integer, Float, Boolean

# Define a new table with a name, count, amount, and valid column: data
data = Table('data', metadata,
             Column('name',String(255)),
             Column('count', Integer()),
             Column('amount', Float()),
             Column('valid',Boolean())
)

# Use the metadata to create the table
metadata.create_all(engine)

# Print table details
print(repr(data))

sample

# Import Table, Column, String, Integer, Float, Boolean from sqlalchemy
from sqlalchemy import Table, Column, String, Integer, Float, Boolean

# Define a new table with a name, count, amount, and valid column: data
data = Table('data', metadata,
             Column('name', String(255), unique=True),
             Column('count', Integer(), default=1),
             Column('amount', Float()),
             Column('valid', Boolean(), default=False)
)

# Use the metadata to create the table
metadata.create_all(engine)

# Print the table details
print(repr(metadata.tables['data']))


>>>>>>>>>>inserting data

from sqlalchemy import insert


stmt=insert(employees).values(id=1,name='Jason',salary=1.00,
active=True)

result_proxy=connection.execute(stmt)
print(result_proxy.rowcount)

insert multiple rows:
1. build an insert statement without any values
2. build a list of dictionaries that represent all the values clauses for the rows you want to insert
3. pass both the statement and values list to the execute method on connection

stmt=insert(employees)

values=[{'id',2, 'name':'rebecca',
'salary':2.00, 'active':True},
{'id':3,'name':'Bob','salary':0.00, 'active':False}]

result_proxy= connection.execute(stmt, values_list)
print(result_proxy.rowcount)


sample

# Import insert and select from sqlalchemy
from sqlalchemy import insert, select

# Build an insert statement to insert a record into the data table: insert_stmt
insert_stmt = insert(data).values(name='Anna',count=1,amount=1000.0,valid=True)

# Execute the insert statement via the connection: results
results = connection.execute(insert_stmt)

# Print result rowcount
print(results.rowcount)

# Build a select statement to validate the insert: select_stmt
select_stmt = select([data]).where(data.columns.name == 'Anna')

# Print the result of executing the query.
print(connection.execute(select_stmt).first())

sample

# Build a list of dictionaries: values_list
values_list = [
    {'name': 'Anna', 'count': 1, 'amount': 750.0, 'valid': True},
    {'name': 'Taylor', 'count': 1, 'amount': 750.0, 'valid': False}
]

# Build an insert statement for the data table: stmt
stmt = insert(data)

# Execute stmt with the values_list: results
results = connection.execute(stmt, values_list)

# Print rowcount
print(results.rowcount) 

sample

# import pandas
import pandas as pd

# read census.csv into a DataFrame : census_df
census_df = pd.read_csv('census.csv', header=None)

# rename the columns of the census DataFrame
census_df.columns = ['state','sex','age', 'pop2000', 'pop2008']


sample

# import pandas
import pandas as pd

# read census.csv into a DataFrame : census_df
census_df = pd.read_csv("census.csv", header=None)

# rename the columns of the census DataFrame
census_df.columns = ['state', 'sex', 'age', 'pop2000', 'pop2008']

# append the data from census_df to the "census" table via connection
census_df.to_sql(name="census", con=connection,  if_exists='append', index=False)

>>>>>>>update statement

from sqlalchemy import update

stmt=update(employees)
stmt=stmt.where(employees.columns.id==3)
stmt = stmt.values(active=True)

result_proxy=connection.execute(stmt)
print(result_proxy.rowcount)

stmt=update(employees)
stmt=stmt.where(employees.columns.active==True)
stmt = stmt.values(active=False,salary=0.0)

result_proxy=connection.execute(stmt)
print(result_proxy.rowcount)

>>>>> correlated update

select_stmt = select([state_fact]).where(state_fact.columns.name == 'New York')
results = connection.execute(select_stmt).fetchall()
print(results)
print(results[0]['fips_state'])

# Build a statement to update the fips_state to 36: update_stmt
update_stmt = update(state_fact).values(fips_state = 36)

# Append a where clause to limit it to records for New York state
update_stmt = update_stmt.where(state_fact.columns.fips_state == 0)

# Execute the statement: update_results
update_results = connection.execute(update_stmt)

# Execute select_stmt again and fetch the new results
new_results = connection.execute(select_stmt).fetchall()

# Print the new_results
print(new_results)
print(new_results[0]['fips_state'])

sample

# Build a statement to update the notes to 'The Wild West': stmt
stmt = update(state_fact).values(notes='The Wild West')

# Append a where clause to match the West census region records: stmt_west
stmt_west = stmt.where(state_fact.columns.census_region_name == 'West')

# Execute the statement: results
results = connection.execute(stmt_west)

# Print rowcount
print(results.rowcount)


sample


# Build a statement to select name from state_fact: fips_stmt
fips_stmt = select([state_fact.columns.name])

# Append a where clause to match the fips_state to flat_census fips_code: fips_stmt
fips_stmt = fips_stmt.where(
    state_fact.columns.fips_state == flat_census.columns.fips_code)

# Build an update statement to set the name to fips_stmt_where: update_stmt
update_stmt = update(flat_census).values(state_name=fips_stmt)

# Execute update_stmt: results
results = connection.execute(update_stmt)

# Print rowcount
print(results.rowcount)

>>>>>>>>>>delete

from sqlalchemy import delete


stmt=select([func.count(extra_employees.columns.id)])
connection.execute(stmt).scalar()

delete_stmt = delete(extra_employees)
result_proxy=connection.execute(delete_stmt)
result_proxy.rowcount

extra_employees.drop(engine)

extra_employees.exists(engine)

metadata.drop_all(engine)

engine.table_names()


sample

# Import delete, select
from sqlalchemy import delete,select

# Build a statement to empty the census table: stmt
delete_stmt = delete(census)

# Execute the statement: results
results = connection.execute(delete_stmt)

# Print affected rowcount
print(results.rowcount)

# Build a statement to select all records from the census table : select_stmt
select_stmt = select([census])

# Print the results of executing the statement to verify there are no rows
print(connection.execute(select_stmt).fetchall())

sample delete where


# Build a statement to count records using the sex column for Men ('M') age 36: count_stmt
count_stmt = select([func.count(census.columns.sex)]).where(
    and_(census.columns.sex == 'M',
         census.columns.age == 36)
)

# Execute the select statement and use the scalar() fetch method to save the record count
to_delete = connection.execute(count_stmt).scalar()

# Build a statement to delete records from the census table: delete_stmt
delete_stmt = delete(census)

# Append a where clause to target Men ('M') age 36: delete_stmt
delete_stmt = delete_stmt.where(
    and_(census.columns.sex == 'M',
         census.columns.age == 36)
)

# Execute the statement: results
results = connection.execute(delete_stmt)

# Print affected rowcount and to_delete record count, make sure they match
print(results.rowcount, to_delete)


sample

# Drop the state_fact table
state_fact.drop(engine)

# Check to see if state_fact exists
print(state_fact.exists(engine))

# Drop all tables

metadata.drop_all(engine)


# Check to see if census exists
print(census.exists(engine))


>>>>>>>>>>>>>case study

from sqlalchemy import create_engine, MetaData
from sqlalchemy import (Table, Column, String, Integer, Decimal, Boolean)

engine=create_engine('sqlite:///census_nyc.sqlite')
metadata=MetaData()


employees=Table('employees',metadata,
Column('id',Integer()),
Column('name',String(255),unique=True, nullable=False),
Column('salary',Decimal(),default=100.0),
Column('active',Boolean(),default=True)
)

metadata.create_all(engine)


sample

# Import create_engine, MetaData
from sqlalchemy import create_engine, MetaData

# Define an engine to connect to chapter5.sqlite: engine
engine = create_engine('sqlite:///chapter5.sqlite')

# Initialize MetaData: metadata
metadata = MetaData()


sample

# Import Table, Column, String, and Integer
from sqlalchemy import (Table, Column, String, Integer)

# Build a census table: census
census = Table('census', metadata,
               Column('state', String(30)),
               Column('sex',String(1)),
               Column('age',Integer()),
               Column('pop2000',Integer()),
               Column('pop2008',Integer())
)

# Create the table in the database
metadata.create_all(engine)


load with csv

values_list=[]

for row in csv_reader:
	data={
	'state':row[0],
	'sex':row[1],
	'age':row[2],
	'pop2000':row[3],
	'pop2008':row[4]
	}
	value_list.append(data)
}


from sqlalchemy import insert
stmt=insert(employees)
result_proxy=connection.execute(stmt, values_list)
print(result_proxy.rowcount)

sample

# Create an empty list: values_list
values_list = []

# Iterate over the rows
for row in csv_reader:
    # Create a dictionary with the values
        data={
	'state':row[0],
	'sex':row[1],
	'age':row[2],
	'pop2000':row[3],
	'pop2008':row[4]
	}
        # Append the dictionary to the values list
        values_list.append(data)

# Import insert
from sqlalchemy import insert

# Build insert statement: stmt

stmt=insert(census)
# Use values_list to insert data: results
result_proxy=connection.execute(stmt, values_list)

# Print rowcount
print(result_proxy.rowcount)


>>>>> queries

determine average age for males and females

from sqlalchemy import select,func

stmt=select ([census.columns.sex,

	(func.sum(census.columns.pop2008
*census.columns.age)/func.sum(census.columns.pop2008)).label('average_age')])


stmt=stmt.group_by('census.columns.sex')

results=connection.execute(stmt).fetchall()

from sqlalchemy import case, cast, Float

stmt=select ([
	func.sum(
		case([
			(census.columns.state=='New York',
			census.columns.pop2008)
			],else_=0))
			/
		cast(func.sum(census.columns.pop2008),
	Float) * 100).label('ny_percent')])

stmt=select([census.columns.age,
(census.columns.pop2008 - census.columns.pop2000).label('pop_change')])

stmt=stmt.group_by(census.columns.age)
stmt=stmt.order_by(desc('pop_change'))

sample

# Import select and func
from sqlalchemy import select,func

# Select the average of age weighted by pop2000
stmt = select([ census.columns.sex,
                (func.sum(census.columns.pop2000 * census.columns.age) 
  					/ func.sum(census.columns.pop2000)).label('average_age'),               
			  ])

# Group by sex
stmt = stmt.group_by(census.columns.sex)

results = connection.execute(stmt).fetchall()

# Print the sex and average age column for each result
for sex,average_age in results:
    print(sex, average_age)


sample


# import case, cast and Float from sqlalchemy
from sqlalchemy import case,cast,Float

# Build a query to calculate the percentage of women in 2000: stmt
stmt = select([census.columns.state,
    (func.sum(
        case([
            (census.columns.sex == 'F', census.columns.pop2000)
        ], else_=0)) /
     cast(func.sum(census.columns.pop2000), Float) * 100).label('percent_female')
])

# Group By state
stmt = stmt.group_by(census.columns.state)

# Execute the query and store the results: results
results = connection.execute(stmt).fetchall()

# Print the percentage
for result in results:
    print(result.state, result.percent_female)

sample

# Build query to return state name and population difference from 2008 to 2000
stmt = select([census.columns.state,
     (census.columns.pop2008-census.columns.pop2000).label('pop_change')
])

# Group by State
stmt = stmt.group_by(census.columns.state)

# Order by Population Change
stmt = stmt.order_by('pop_change')

# Limit to top 10
stmt = stmt.limit(10)

# Use connection to execute the statement and fetch all results
results = connection.execute(stmt).fetchall()

# Print the state and population change for each record
for result in results:
    print('{}:{}'.format(result.state, result.pop_change))